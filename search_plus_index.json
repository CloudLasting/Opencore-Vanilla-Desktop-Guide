{"./":{"url":"./","title":"OpenCore Vanilla Guide","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Introduction Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide About OpenCore is an open-source unconventional first-in-class piece of software designed to intercept kernel loading to insert a highly advanced rootkit, designed to be an alternative to Clover. OpenCore aims to resolve the constraints and issues imposed by Clover by providing a more versatile and modular system. While OpenCore is primarily designed for Hackintosh systems, it can be used in any scenario where an emulated EFI is needed with many using it on KVMs and real Macs Please remember that OpenCore is still new and currently in beta. While quite stable, and arguably much more stable than Clover in pretty much every way, is still being frequently updated and so chunks configuartion change quite often(ie. New quirks replacing old ones) Lastly, this guide is only meant to be a starting point in your journey with OpenCore and not recommended for beginners unless absolutely necessary. For those starting, please see the r/Hackintosh Vanilla Desktop Guide. And those who have issues can visit both the r/Hackintosh subreddit and r/Hackintosh discord for more help. This guide supports 0.5.7, newer versions will require you to read the Differences.pdf. Guide will be updated soon after each OpenCore release Advantages of OpenCore On average, OpenCore systems boot faster than those using Clover as less unnessary patching is done Better overall stability as patches can be much more persise: macOS 10.15.4 update as an example OpenCore offers better overall security with better support for FileVault, no need to disable System Integrity Protection(SIP) and even secure boot-like functionality support via Vaulting OpenCore supports boot hotkey support via boot.efi - hold Option or ESC at startup to choose a boot device, Cmd+R to enter Recovery or Cmd+Opt+P+R to reset NVRAM. OpenCore is designed with the future in mind and uses modern methods to load 3rd party kernel extensions without breaking System Integrity Protection which Clover uses BootCamp switching and boot device selection are supported by reading NVRAM variables set by Startup Disk just like a real mac. Future development for AptioMemoryFix is directly tied to OpenCore, specifically being absorbed into OpenCore itself with the FwRuntimeVariable.efi being used as an extension. UEFI and Legacy boot modes are supported More sophisticated patching such as mask patching means macOS updates have very little chance of breaking AMD systems, with AMD OSX patches supporting all versions of High Sierra, Mojave and Catalina. All future AMD OSX development is tied to Opencore, so for 10.15.2+ you'll need OpenCore OpenCore Tips Kernel extensions are loaded in the order specified in your config file, so you must load an extension's dependencies before you load the extension itself. For example, Lilu must be loaded before WhateverGreen or VirtualSMC. SMBIOS data, ACPI patches and DSDT/SSDTs are applied to all operating systems. Adjust your SSDTs with If (_OSI (\"Darwin\")) {} Note that all SSDTs mentioned in this guide have been updated accordingly and should not affect booting Some systems require pure UEFI mode to boot. (This setting is commonly called \"Windows 8.1/10 UEFI Mode\" by motherboard manufacturers. See also on flashing a UEFI ROM onto older GPUs) Issues can occur if NVMe devices are set up as SATA devices in the BIOS. OpenCore requires a version of macOS that supports a prelinked kernel, this means any installs of OS X 10.7 Lion or newer are supported with some later versions of OS X 10.6 Snow Leopard also having support. Recommended BIOS settings Disable: Fast Boot VT-d (can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock (MSR 0xE2 write protection) If this can't be turned off in the BIOS(or even found) please consider patching it out. See Fixing CFG Lock for more info. AMD CPU users don't need to worry about. Enable: VT-X Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode "},"installer-guide/opencore-efi.html":{"url":"installer-guide/opencore-efi.html","title":"Creating the USB","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Creating the USB Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide Requirements: OpenCorePkg, highly recommend running the debug version to show more info AppleSupportPkg ProperTree to edit .plist files (OpenCore Configurator is another tool but is heavily outdated and the Mackie version is known for corruption. Please avoid these kinds of tools at all costs!). Cleaned NVRAM(This is seriously important if you used Clover before, as many variables will remain causing conflicts. Luckily with OC you can press CleanNvram in the boot picker when AllowNvramReset is enabled in your config) Basic knowledge of how a Hackintosh works and what files yours requires(ie: Type of network controller). You must remove Clover from your system entirely if you wish to use it as your main boot-loader. Keep a backup of your Clover based EFI. See here on what needs to be cleaned: Clover Conversion Making the installer Depending on which OS you're on, see your specific section on making the USB, then once done return here on setting up OpenCore: macOS users Windows users Linux users Setting up the EFI To setup OpenCore’s folder structure, you’ll want to grab the EFI folder found in OpenCorePkg's releases page(this will already be done on the BOOT USB drive for windows users): Now something you'll notice is that it comes with a bunch of files in Drivers and Tools folder, we don't want most of these: Remove from Drivers: OpenUsbKbDxe.efi Used for OpenCore picker on legacy systems running DuetPkg, not recommended and even harmful on Ivy Bridge and newer NvmExpressDxe.efi Used for Haswell and older when no NVMe driver is built into the firmware XhciDxe.efi Used for Sandy Bridge and older when no XHCI driver is built into the firmware HiiDatabase.efi Used for fixing GUI support like OpenShell.efi on Sandy Bridge and older OpenCanopy.efi This is OpenCore's optional GUI, we'll be going over how to set this up in post-install so remove this for now Remove everything from Tools: Way to many to list them all, but I recommend keeping OpenShell.efi for troubleshooting pruposes A cleaned up EFI: Now you can place your necessary firmware drivers(.efi) from AppleSupportPkg into the Drivers folder and Kexts/ACPI into their respective folders. Please note that UEFI drivers from Clover are not supported with OpenCore!(EmuVariableUEFI, AptioMemoryFix, OsxAptioFixDrv, etc). Please see the Clover firmware driver conversion for more info on supported drivers and those merged into OpenCore. Here's what a populated EFI can look like: Reminder: SSDTs and custom DSDTs(.aml) go in ACPI folder Kexts(.kext) go in Kexts folder Firmware drivers(.efi) go in the Drivers folder Now head to Gathering Files to get the needed kexts and firmware drivers "},"installer-guide/mac-install.html":{"url":"installer-guide/mac-install.html","title":"macOS install","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Making the installer in macOS Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide While you don't need a fresh install of macOS to use OpenCore, some users prefer having a fresh slate with their boot manager upgrades. Note for legacy users If you want to use OpenCore on a system without UEFI, please follow the Legacy Install section first, after you can continue following the Base folder structure section To start we'll want to grab ourselves a copy of macOS, you can skip this and head to formatting the USB if you're just making a bootable OpenCore stick and not an installer. For everyone else, you can either download macOS from the appstore or with GibMacOS Dowloading macOS Now lets grab GibMacOS and run the gibMacOS.command: From this, we get a nice list of macOS installers. If you need beta versions of macOS, you can select C. Change Catalog. For this example we'll choose 1: This is going to take a while as we're downloading the entire 8GB+ macOS installer, so highly recommend reading the rest of the guide while you wait. Once finished, we'll next want to run the BuildmacOSInstallApp.command: It's gonna ask for the macOS installer files, at the moment they're in pieces in the macOS Downloads folder found in GibMacOS Once it's done, you can find it with the rest of the files. I recommend moving it to your applications folder to make things a bit easier with the next section. Setting up the installer Now we'll be formatting the USB to prep for both the macOS installer and OpenCore. We'll want to use MacOS Extended(HFS+) with a GUID partition map. What this will do is create 2 partitions. The main MyVolume and a second called EFI which is used as a boot partition where your fimrware will check for boot files. Next run the createinstallmedia command provided by Apple, note that the command is made for USB's formatted with the name MyVolume: sudo /Applications/Install\\ macOS\\ Catalina.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume This will take some time so may want to grab a coffee or continue reading the guide(to be fair you really shouldn't be following this guide step by step without reading the whole thing first) You can also replace the createinstallmedia path with that of where your installer's located, same idea with the drive name. Setting up OpenCore's EFI environment Setting up OpenCore's EFI environment is simple, all you need to do is mount our EFI system partition. This is automatically made when we format with GUID but is unmounted by default, this is where our friend mountEFI comes in: You'll notice that once we open the EFI partition, it's empty. This is where the fun begins. Now with all this done, return to Creating the USB to finish up your work "},"installer-guide/winblows-install.html":{"url":"installer-guide/winblows-install.html","title":"Windows install","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Making the installer in Windows Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide While you don't need a fresh install of macOS to use OpenCore, some users prefer having a fresh slate with their boot manager upgrades. To start you'll need the following: 4GB USB Stick GibMacOS Downloading macOS To start, open gibMacOS.bat as Admin and select Toggle Recovery-Only: Now search through for your desired version of macOS, for this example we'll choose option 5 for macOS Catalina: This will download the RecoveryHDMetaDmg.pkg to \\gibmacos-master\\macOS Downloads\\publicrelease\\xxx-xxxxx - 10.x.x macOS xxx Making the installer Next open makeinstall.bat as Admin and select your drive with option O for OpenCore( ex: 1O). Once your drive is formatted, it will then ask you for the RecoveryHDMetaDMG.pkg that we downloaded earlier. Top right of the file window will let you copy the file path: makeinstall will finish up by installing OpenCore to your USB's EFI System Partition, you can find this partition labeled as BOOT: Now with all this done, return to Creating the USB to finish up your work "},"installer-guide/linux-install.html":{"url":"installer-guide/linux-install.html","title":"Linux install","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Making the installer in Linux Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide While you don't need a fresh install of macOS to use OpenCore, some users prefer having a fresh slate with their boot manager upgrades. To start you'll need the following: 4GB USB Stick GibMacOS Downloading macOS Now to start, run gibmacOS.py in terminal with Toggle Recovery-Only: python gibMacOS.command -r Now search through for your desired version of macOS, for this example we'll choose option 5 for macOS Catalina: This will download the RecoveryHDMetaDmg.pkg to \\gibmacos-master\\macOS Downloads\\publicrelease\\xxx-xxxxx - 10.x.x macOS xxx Making the installer This section will target making the necessary partitions in the USB device. You can use your favorite program be it gdisk fdisk parted gparted or gnome-disks. This guide will focus on gdisk as it's nice and can change the partition type later on, as we need it so that macOS Recovery HD can boot. (the distro used here is Ubuntu 18.04, other versions or distros may work) Credit to midi1996 for his work on the hackintosh-internet-install-gitbook guide which this is based off of. Method 1 In terminal: run lsblk and determine your USB device block run sudo gdisk /dev/ if you're asked what partition table to use, select GPT. send p to print your block's partitions (and verify it's the one needed) send o to clear the partition table and make a new GPT one (if not empty) confirm with y send n partition number: keep blank for default first sector: keep blank for default last sector: keep blank for whole disk Hex code or GUID: 0700 for Microsoft basic data partition type send w Confirm with y In some cases a reboot is needed, but rarely, if you want to be sure, reboot your computer. You can also try re-plugging your USB key. Close gdisk by sending q (normally it should quit on its own) Use lsblk to determin your partition's identifiers run sudo mkfs.vfat -F 32 -n \"OPENCORE\" /dev/ to format your USB to FAT32 and named OPENCORE then cd to gibmacos-master/macOS\\ Downloads/publicrelease/xxx-xxxxx - 10.x.x macOS xxx and you should get to a pkg file download p7zip-full (depending on your distro tools) for ubuntu/ubuntu-based run sudo apt install p7zip-full for arch/arch-based run sudo pacman -S p7zip for the rest of you, you should know for all distros: make sure you're using bash for 7zip to work. run this 7z e -txar *.pkg *.dmg; 7z e *.dmg */Base* to extract BaseSystem.dmg and BaseSystem.chunklist mount your USB partition with udisksctl (udisksctl mount -b /dev/, no sudo required in most cases) or with mount (sudo mount /dev/ /where/your/mount/stuff, sudo is required) cd to your usb driver and mkdir com.apple.recovery.boot in the root of your FAT32 USB partition now cp or rsync both BaseSystem.dmg and BaseSystem.chunklist into com.apple.recovery.boot folder. Method 2 (in case 1 didn't work) In terminal: run lsblk and determine your USB device block run sudo gdisk /dev/ if you're asked what partition table to use, select GPT. send p to print your block's partitions (and verify it's the one needed) send o to clear the partition table and make a new GPT one (if not empty) confirm with y send n partition number: keep blank for default first sector: keep blank for default last sector: +200M to create a 200MB partition that will be named later on OPENCORE Hex code or GUID: 0700 for Microsoft basic data partition type send n partition number: keep blank for default first sector: keep blank for default last sector: keep black for default (or you can make it +3G if you want to partition further the rest of the USB) Hex code or GUID: af00 for Apple HFS/HFS+ partition type send w Confirm with y In some cases a reboot is needed, but rarely, if you want to be sure, reboot your computer. You can also try re-plugging your USB key. Close gdisk by sending q (normally it should quit on its own) Use lsblk again to determine the 200MB drive and the other partition run sudo mkfs.vfat -F 32 -n \"OPENCORE\" /dev/ to format the 200MB partition to FAT32, named OPENCORE then cd to gibmacos-master/macOS\\ Downloads/publicrelease/xxx-xxxxx - 10.x.x macOS xxx and you should get to a pkg file download p7zip-full (depending on your distro tools) for ubuntu/ubuntu-based run sudo apt install p7zip-full for arch/arch-based run sudo pacman -S p7zip for the rest of you, you should know for all distros: make sure you're using bash for 7zip to work. run this 7z e -txar *.pkg *.dmg; 7z e *.dmg */Base* this will extract the recovery from the pkg through extracting the recovery update package then extracting the recovery dmg then the hfs image from it (BaseSystem.dmg). download dmg2img (available on most distros) run dmg2img -l BaseSystem.dmg and determin which partition has disk image property run dmg2img -p -i BaseSystem -o to extract and write the recovery image to the partition disk It will take some time. A LOT if you're using a slow USB (took me about less than 5 minutes with a fast USB2.0 drive). Now with all this done, return to Creating the USB to finish up your work "},"ktext.html":{"url":"ktext.html","title":"Gathering files","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Gathering files Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide This section is for gathering miscellaneous files for booting macOS, we do expect you to know your hardware well before starting and hopefully made a Hackintosh before as we won't be deep diving in here. What's the best way to figure out if my hardware is supported? See the supported hardware section for some better insight into what macOS requires to boot, hardware support between Clover and OpenCore are quite similar. Firmware Drivers These are the drivers used by OpenCore, for the majority of systems you only need 3 .efi drivers to get up and running: ApfsDriverLoader.efi Needed for seeing APFS volumes(ie. macOS) HfsPlus.efi or VboxHfs.efi Needed for seeing HFS volumes(ie. macOS Installers and Recovery partitions/images). Do not mix HFS drivers OpenRuntime.efi Replacement for AptioMemoryFix.efi, used as an extension for OpenCore to help with patching boot.efi for NVRAM fixes and better memory management. For legacy users: OpenUsbKbDxe.efi Used for OpenCore picker on legacy systems running DuetPkg, not recommended and even harmful on UEFI(Ivy Bridge and newer) NvmExpressDxe.efi Used for Haswell and older when no NVMe driver is built into the firmware, not needed if you're not using an NVMe drive XhciDxe.efi Used for Sandy Bridge and older when no XHCI driver is built into the firmware, not needed if you're not using a USB 3.0 expansion card HfsPlusLegacy.efi Legacy variant of HfsPlus, used for systems that lack RDRAND instruction support. This is generally seen on Sandy Bridge and older For a full list of compatible drivers, see 11.2 Properties in the OpenCorePkg Docs. These files will go in your Drivers folder in your EFI Kexts A kext is a kernel extension, you can think of this as a driver for macOS, these files will go into the Kexts folder in your EFI All kext listed below can be found pre-compiled in the Kext Repo. Kexts here are compiled each time there's a new commit. Must haves: VirtualSMC Emulates the SMC chip found on real macs, without this macOS will not boot Alternative is FakeSMC which can have better or worse support, most commonly used on legacy hardware. Lilu A kext to patch many processes, required for AppleALC and WhateverGreen and recommended for VirtualSMC VirtualSMC Plugins: SMCProcessor.kext Used for monitoring CPU temperature, doesn't work AMD CPU based systems SMCSuperIO.kext Used for monitoring fan speed, doesn't work AMD CPU based systems SMCLightSensor.kext Used for the ambient light sensor on laptops, desktops can ignore Do not use if you don't have an ambient light sensor, can cause issues otherwise SMCBatteryManager.kext Used for measuring battery readouts on laptops, desktops can ignore Do not use until battery has been poperly patched, can cause issues otherwise Graphics: WhateverGreen Used for graphics patching DRM, boardID, framebuffer fixes, etc, all GPUs benefit from this kext. Note the SSDT-PNLF.dsl file included is only required for laptops and AIOs, see * Getting started with ACPI for more info Audio: AppleALC Used for AppleHDA patching, used for giving you onboard audio. AMD 15h/16h may have issues with this and Ryzen/Threadripper systems rarely have mic support Ethernet: IntelMausiEthernet Required for Intel NICs, chipsets that are based off of I211-AT will need the SmallTreeIntel82576 kext SmallTreeIntel82576 kext Required for I211-AT NICs, based off of the SmallTree kext but patched to support I211-AT Required for most AMD boards running Intel NICs AtherosE2200Ethernet Required for Atheros and Killer NICs RealtekRTL8111 Required for Realtek NICs USB: USBInjectAll Used for injecting Intel USB controllers on systems without defined USB ports in ACPI Not needed on Skylake and newer Does not work on AMD CPUs at all XHCI-unsupported Needed for non-native USB controllers AMD CPU based systems don't need this Common chipsets needing this: H370 B360 H310 Z390(Not needed on High Sierra and newer) X79 X99 X299(Not needed on High Sierra and newer) AsRock boards(On Intel motherboards specifically, basically all of their boards) WiFi and Bluetooth: AirportBrcmFixup Used for patching non-Apple Broadcom cards, will not work on intel, Killer, Realtek, etc BrcmPatchRAM Used for uploading firmware on broadcom bluetooth chipset, required for all non-Apple/Fenvi Airport cards. To be paired with BrcmFirmwareData.kext BrcmPatchRAM3 for 10.14+ (must be paired with BrcmBluetoothInjector) BrcmPatchRAM2 for 10.11-10.14 BrcmPatchRAM for 10.10 or older The order in Kernel -> Add should be: BrcmBluetoothInjector BrcmFirmwareData BrcmPatchRAM3 AMD CPU Specific kexts: NullCPUPowerManagment We have a much better solution known as DummyPowerManagement found under Kernel -> Quirks XLNCUSBFIX USB fix for AMD FX systems, not recommended for Ryzen VoodooHDA Audio for FX systems and front panel Mic+Audio support for Ryzen system, do not mix with AppleALC. Audio quality is noticably worse than AppleALC on Zen CPUs Extra's: AppleMCEReporterDisabler Useful starting with Catalina to disable the AppleMCEReporter kext which will cause kernel panics on AMD CPUs and dual-socket systems Affected SMBIOS: MacPro6,1 MacPro7,1 iMacPro1,1 VoodooTSCSync Needed for syncing TSC on some of Intel's HEDT and server motherboards, without this macOS may be extremly slow or even unbootable. Skylake-X should use TSCAdjustReset instead TSCAdjustReset On Skylake-X, many firmwares including Asus and EVGA won't write the TSC to all cores. So we'll need to reset the TSC on cold boot and wake. Compiled version can be found here: TSCAdjustReset.kext. Note that you must open up the kext(ShowPackageContents in finder, Contents -> Info.plist) and change the Info.plist -> IOKitPersonalities -> IOPropertyMatch -> IOCPUNumber to the number of CPU threads you have starting from 0(i9 7980xe 18 core would be 35 as it has 36 threads total) NVMeFix Used for fixing power management and initialization on non-Apple NVMe, requires macOS 10.14 or newer Laptop Specifics: VoodooPS2 Required for systems with PS2 keyboards and trackpads Trackpad users should also pair this with VoodooInput(This must come before VoodooPS2 in your config.plist) VoodooI2C Used for fixing I2C devices, found with some fancier touchpads and touchscreen machines To be paired with a plugin: VoodooI2CHID - Implements the Microsoft HID device specification. VoodooI2CElan - Implements support for Elan proprietary devices. (does not work on ELAN1200+, use the HID instead) VoodooI2CSynaptics - Implements support for Synaptics proprietary devices. VoodooI2CFTE - Implements support for the FTE1001 touchpad. VoodooI2CUPDDEngine - Implements Touchbase driver support. To figure out what kind of keyboard and trackpad you have, check DeviceManager in Windows or dmesg |grep input in Linux NoTouchID Recommended for SMBIOS that include a TouchID sensor to fix auth issues Please refer to Kexts.md for a full list of supported kexts SSDTs So you see all those SSDTs in the AcpiSamples folder and wonder whether you need any of them. For us, we will be going over what SSDTs you need in your specific ACPI section of the config.plist, as the SSDTs you need are platform specific. With some even system specific where they need to be configured and you can easily get lost if I give you a list of SSDTs to choose from now. Getting started with ACPI has an extended section on SSDTs including compiling them on different platforms. A quick TL;DR of needed SSDTs(This is source code, you will have to compile them into a .aml file): Desktop Ivy Bridge: SSDT-EC CPU-PM Desktop Haswell: SSDT-PLUG SSDT-EC Desktop Skylake: SSDT-PLUG SSDT-EC-USBX Desktop Kabylake: SSDT-PLUG SSDT-EC-USBX Desktop Coffeelake: SSDT-PLUG SSDT-EC-USBX SSDT-AWAC SSDT-PMC Haswell-E: SSDT-PLUG SSDT-EC Broadwell-E: SSDT-PLUG SSDT-EC Skylake-X: SSDT-PLUG SSDT-EC-USBX SSDT-AWAC Desktop AMD: SSDT-EC-USBX Now head Getting Started With ACPI "},"extras/acpi.html":{"url":"extras/acpi.html","title":"Getting started with ACPI","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Getting started with ACPI Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide This section is dedicated to the process of both dumping and making ACPI tables. Due to the many different types of SSDT possible, the guide has been spun out into it's own. Guide has been move here: Getting Started With ACPI "},"config.plist/ivy-bridge.html":{"url":"config.plist/ivy-bridge.html","title":"Ivy Bridge","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Ivy Bridge Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide Starting Point So making a config.plist may seem hard, its not. It just takes some time but this guide will tell you how to configure eveything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore: All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default. The Sample.plist cannot be used As-Is, you must configure it to your system DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists! Now with all that, we'll need some things to get started: ProperTree: For editing our config, this editor has some super useful tools for OpenCore GenSMBIOS: For generating our SMBIOS Sample.plist: This is found under the Docs folder of the release download Now with those downloaded, we can get to really get started: Grab the Sample.plist and rename to config.plist Open your new config.plist in ProperTree macOS: ProperTree.command Windows: ProperTree.bat Run the Clean Snapshot function(Cmd/Ctrl + Shift + R and point it at your EFI/OC folder), This will remove all the entries from the config.plist and then adds all your SSDTs, Kexts and Firmware drivers to the config Cmd+R is another option that will add all your files as well but will leave entries disabled if they were set like that before, useful for when you're troubleshooting And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, its even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-EC Hides the Embedded controller and creates a fake one for macOS, needed for all Catalina users and recommended for other versions of macOS SSDT-EHCx_OFF Prefered alternative over renaming EHCI for setting up USB correctly on pre-skylake systems. This can be avoided if your BIOS supports EHCI-Handoff CPU-PM Needed for proper CPU power management, you will need to run Pike's ssdtPRGen.sh script to generate this file. This will be run in post install. Note that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/ACPI. For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This blocks certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore Quirk: Settings relating to ACPI, leave everything here as default. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio Quirks: Settings relating to boot.efi patching and firmware fixes, one we need to change is RebuildAppleMemoryMap AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values and generally useful especially on HEDT and Xeon systems DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM, you can verify here if yours works DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectMemoryRegion: NO Needed for fixing artefacts and sleep-wake issues, generally only needed on very old firmwares ProtectSecureBoot: NO Fixes secureboot keys on MacPro5,1 and Insyde firmwares ProtectUefiServices: NO Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, Icelake and newer Coffeelake systems ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message RebuildAppleMemoryMap: YES Generates Memory Map compatible with macOS SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses, not needed on Skylake and newer SignalAppleOS: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used SyncRuntimePermissions: NO Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for Skylake and newer DeviceProperties Add: Sets device properties from a map. This section is set up via WhateverGreen's Framebuffer Patching Guide and is used for fixing certain iGPU properties like ig-platform-id. The way we get the proper value for this is to look at the framebuffer we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA The ig-platform-id's we use is as follows: 0x0166000A - this is the standard hex for the ig-plat 0A006601 when hex-swapped We also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. The first enables patching via WhateverGreen.kext, and the second sets the min stolen memory to 19MB. This is usually unnecessary, as this can be configured in BIOS(32MB recommended) but required when not available. Key Type Value AAPL,ig-platform-id Data 0A006601 framebuffer-patch-enable Data 01000000 framebuffer-stolenmem Data 00003001 (This is an example for a desktop HD 4000 and no BIOS options for iGPU memory) Special note: Mobile users should refer to mobile iGPU section for what properties should be used: iGPU Patching PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Block: Removes device properties from the map, for us we can ignore this Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: Leave this blank CpuidData: Leave this blank Block: Blocks kexts from loading. Not relevant for us Patch: Patches both the kernel and kexts Quirks: Settings relating to the kernel, for us we'll be enabling AppleCpuPmCfgLock, AppleXcpmCfgLock, DisableIOMapper, PanicNoKextDump, PowerTimeoutKernelPanic and XhciPortLimit. Everything else should be left as default AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIoMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina DummyPowerManagement: NO New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management. Intel can ignore ExternalDiskIcons: NO External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this. Note this shouldn't be needed on Mojave and newer LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (Leave everything as default) HibernateMode: None Best to avoid hibernation with Hackintoshes all together PickerMode: Builtin Sets OpenCore to use the builtin picker HideAuxiliary: NO Hides Recovery and other partitions unless spacebar is pressed, more closely matches real Mac behaviour HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker ConsoleAttributes: 0 Sets OpenCore's UI color, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAttributes: 0 Used for setting custom picker attributes, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAudioAssist: NO Used for enabling VoiceOver like support in the picker, unless you want your hack talking to you keep this disabled PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use OpenUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key TakeoffDelay: 0 Used to add a delay for hotkeys when OpenCore is a bit to fast to register, 5000-10000 microseconds is the prefered range for users with broken hotkeys support Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection Debug: Helpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay) AppleDebug: YES Enables boot.efi logging, useful for debuuging. Note this is only supported on 10.15.4 and newer DisableWatchDog: YES Disables the UEFI watchdog, can help with early boot issues Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory, do not skip We'll be changing AllowNvramReset, AllowSetDefault, Vault and ScanPolicy AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a security risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore Vault: Optional We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USBs with this set to default Tools Used for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you. For us, we won't be using any tools Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: OpenShell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Won't be covered here, see 8.6 of Configuration.pdf for more info NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, mainly used for UI Scaling) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) DefaultBackgroundColor: Background color used by boot.efi 00000000: Syrah Black BFBFBF00: Light Gary 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100- this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can hopefully glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 03000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best security practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD, Intel and Kepler GPU users should delete this section. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX Key Type Value prev-lang:kbd String en-US:0 Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Ivy Bridge example, we'll chose the iMac13,2 SMBIOS - this is done intentionally for compatibility's sake. There are two main SMBIOS used for Ivy Bridge: iMac13,1 - this is used for computers utilizing the iGPU for displaying. iMac13,2 - this is used for computers using a dGPU for displaying, and an iGPU for computing tasks only. Note: Mobile users should refer to the SMBIOS page on which to choose: Mobile SMBIOS Run GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # iMac13,2 SMBIOS Info # ####################################################### Type: iMac13,2 Serial: C02KCYZLDNCW Board Serial: C02309301QXF2FRJC SmUUID: A154B586-874B-4E57-A1FF-9D6E503E4580 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want either an invalid serial or valid serial numbers but those not in use, you want to get a message back like: \"Invalid Serial\" or \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates Platforminfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections Generic: SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Only drivers present here should be: HfsPlus.efi ApfsDriverLoader.efi OpenRuntime.efi Audio: Related to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS AudioSupport: NO Used for enabling the audio port out, this requires AudioOut AudioDevice: [Blank] This will be the PciRoot of your audio device, gfxutil and debug log are great ways to find this AudioCodec: 0 Specify your audio codec address, can be found in either debug log or with under IOHDACodecAddress in IOService AudioOut: 0 Specifies which output is used, use the debug log to see what your board has Same idea, can be found in either debug log or with HdaCodecDump.efi MinimumVolume: 20 Default sound level for audio output PlayChime: NO Emulates the iconic Mac startup sound This also requires AXEFIAudio_VoiceOver_Boot.wav under EFI/OC/Resources/Audio VolumeAmplifier: 0 Multiplication coefficient for system volume to raw volume linear translation from 0 to 1000, see Configuration.pdf for more info on calculation Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyFiltering: NO Verifies and discards uninitialised data, mainly prevalent on 7 series Gigabyte boards KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with OpenUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Output: Relating to visual output TextRenderer: BuiltinGraphics Used for fixing resoltuion of OpenCore itself, Resolution must be set to Max to work correctly ConsoleMode: [Blank] Specifies Console output size, best to keep it blank Resolution: Max Sets OpenCore's resolution, Max will use the highest avalible reolution or can be specified (WxH@Bpp (e.g. 1920x1080@32) or WxH (e.g. 1920x1080)) ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that this is only required in cases when using System TextRenderer IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs, only relevant for users using System TextRenderer ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for graphical output once the kernel takes over DirectGopRendering: NO Use builtin graphics output protocol renderer for console, mainly relevant for MacPro5,1 users ReconnectOnResChange: NO ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: NO Fixes High resolutions displays that display OpenCore in 1024x768, only relevant for users using System TextRenderer Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 3000 - 5000 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: YES Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Sanity check: So thanks to the efforts of Ramus, we also have an amazing tool to help verify your config for those who may have missed something: Sanity Checker Intel BIOS settings Disable: Fast Boot VT-d (can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode DVMT Pre-Allocated(iGPU Memory): 32MB Post-install "},"config.plist/haswell.html":{"url":"config.plist/haswell.html","title":"Haswell","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Haswell Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide Both Haswell and Broadwell users can follow this Starting Point So making a config.plist may seem hard, its not. It just takes some time but this guide will tell you how to configure eveything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore: All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default. The Sample.plist cannot be used As-Is, you must configure it to your system DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists! Now with all that, we'll need some things to get started: ProperTree: For editing our config, this editor has some super useful tools for OpenCore GenSMBIOS: For generating our SMBIOS Sample.plist: This is found under the Docs folder of the release download Now with those downloaded, we can get to really get started: Grab the Sample.plist and rename to config.plist Open your new config.plist in ProperTree macOS: ProperTree.command Windows: ProperTree.bat Run the Clean Snapshot function(Cmd/Ctrl + Shift + R and point it at your EFI/OC folder), This will remove all the entries from the config.plist and then adds all your SSDTs, Kexts and Firmware drivers to the config Cmd+R is another option that will add all your files as well but will leave entries disabled if they were set like that before, useful for when you're troubleshooting And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, its even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management on Haswell and newer, Clover alternative would be under Acpi -> GenerateOptions -> PluginType SSDT-EC Hides the Embedded controller and creates a fake one for macOS, needed for all Catalina users and recommended for other versions of macOS SSDT-EHCx_OFF Prefered alternative over renaming EHCI for setting up USB correctly on pre-skylake systems. This can be avoided if your BIOS supports EHCI-Handoff Note that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/ACPI. For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This blocks certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore Quirk: Settings relating to ACPI, leave everything here as default. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio Quirks: Settings relating to boot.efi patching and firmware fixes, one we need to change is RebuildAppleMemoryMap AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values and generally useful especially on HEDT and Xeon systems DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM, you can verify here if yours works DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectMemoryRegion: NO Needed for fixing artefacts and sleep-wake issues, generally only needed on very old firmwares ProtectSecureBoot: NO Fixes secureboot keys on MacPro5,1 and Insyde firmwares ProtectUefiServices: NO Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, Icelake and newer Coffeelake systems ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message RebuildAppleMemoryMap: YES Generates Memory Map compatible with macOS SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses, not needed on Skylake and newer SignalAppleOS: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used SyncRuntimePermissions: NO Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for Skylake and newer DeviceProperties Add: Sets device properties from a map. This section is set up via WhateverGreen's Framebuffer Patching Guide and is used for fixing certain iGPU properties like ig-platform-id. The way we get the proper value for this is to look at the framebuffer we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA The two ig-platform-id's we use are as follows: 0x0D220003 - this is used when the Desktop Haswell iGPU is used to drive a display 0300220D when hex-swapped 0x04120004 - this is used when the Desktop Haswell iGPU is only used for computing tasks and doesn't drive a display 04001204 when hex-swapped 0x0D220003 - this is used when the Desktop Broadwell iGPU 07002216 when hex-swapped I added another portion as well that shows a device-id fake in case you have an HD 4400 which is unsupported in macOS. The device-id fake is set up like so: 0x04120000 - this is the device id for HD 4600 which does have support in macOS 12040000 when hex swapped We also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. The first enables patching via WhateverGreen.kext, and the second sets the min stolen memory to 19MB. This is usually unnecessary, as this can be configured in BIOS(64MB recommended) but required when not available. Key Type Value AAPL,ig-platform-id Data 0300220D framebuffer-patch-enable Data 01000000 framebuffer-stolenmem Data 00003001 device-id Data 12040000 (This is an example for a desktop HD 4400 without a dGPU and no BIOS options for iGPU memory) Key Type Value AAPL,ig-platform-id Data 07002216 framebuffer-patch-enable Data 01000000 framebuffer-stolenmem Data 00003001 (This is an example for a desktop Iris Pro 6200 and no BIOS options for iGPU memory) Special note: Mobile users should refer to mobile iGPU section for what properties should be used: iGPU Patching PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Block: Removes device properties from the map, for us we can ignore this Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: Leave this blank CpuidData: Leave this blank Block: Blocks kexts from loading. Not relevant for us Patch: Patches both the kernel and kexts Quirks: Settings relating to the kernel, for us we'll be enabling AppleCpuPmCfgLock, AppleXcpmCfgLock, DisableIOMapper, PanicNoKextDump, PowerTimeoutKernelPanic and XhciPortLimit. Everything else should be left as default AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIoMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina DummyPowerManagement: NO New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management. Intel can ignore ExternalDiskIcons: NO External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this. Note this shouldn't be needed on Mojave and newer LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (Leave everything as default) HibernateMode: None Best to avoid hibernation with Hackintoshes all together PickerMode: Builtin Sets OpenCore to use the builtin picker HideAuxiliary: NO Hides Recovery and other partitions unless spacebar is pressed, more closely matches real Mac behaviour HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker ConsoleAttributes: 0 Sets OpenCore's UI color, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAttributes: 0 Used for setting custom picker attributes, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAudioAssist: NO Used for enabling VoiceOver like support in the picker, unless you want your hack talking to you keep this disabled PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use OpenUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key TakeoffDelay: 0 Used to add a delay for hotkeys when OpenCore is a bit to fast to register, 5000-10000 microseconds is the prefered range for users with broken hotkeys support Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection Debug: Helpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay) AppleDebug: YES Enables boot.efi logging, useful for debuuging. Note this is only supported on 10.15.4 and newer DisableWatchDog: YES Disables the UEFI watchdog, can help with early boot issues Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory, do not skip We'll be changing AllowNvramReset, AllowSetDefault, Vault and ScanPolicy AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a security risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore Vault: Optional We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USBs with this set to default Tools Used for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you. For us, we won't be using any tools Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: OpenShell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Won't be covered here, see 8.6 of Configuration.pdf for more info NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, mainly used for UI Scaling) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) DefaultBackgroundColor: Background color used by boot.efi 00000000: Syrah Black BFBFBF00: Light Gary 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100- this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can hopefully glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 03000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best security practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD, Intel and Kepler GPU users should delete this section. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX Key Type Value prev-lang:kbd String en-US:0 Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Haswell example, we chose the iMac15,1 SMBIOS. The typical breakdown is as follows: Haswell with only iGPU iMac14,1 Haswell with dGPU iMac14,2 Haswell Refresh (Devil's Canyon) iMac15,1 Broadwell iMac16,1 Note: Mobile users should refer to the SMBIOS page on which to choose: Mobile SMBIOS Run GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # iMac15,1 SMBIOS Info # ####################################################### Type: iMac15,1 Serial: C02M9SYJFY10 Board Serial: C02408101J9G2Y7A8 SmUUID: 7B227BEC-660D-405F-8E60-411B3E4EF055 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want either an invalid serial or valid serial numbers but those not in use, you want to get a message back like: \"Invalid Serial\" or \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates Platforminfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections Generic: SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Only drivers present here should be: HfsPlus.efi ApfsDriverLoader.efi OpenRuntime.efi Audio: Related to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS AudioSupport: NO Used for enabling the audio port out, this requires AudioOut AudioDevice: [Blank] This will be the PciRoot of your audio device, gfxutil and debug log are great ways to find this AudioCodec: 0 Specify your audio codec address, can be found in either debug log or with under IOHDACodecAddress in IOService AudioOut: 0 Specifies which output is used, use the debug log to see what your board has Same idea, can be found in either debug log or with HdaCodecDump.efi MinimumVolume: 20 Default sound level for audio output PlayChime: NO Emulates the iconic Mac startup sound This also requires AXEFIAudio_VoiceOver_Boot.wav under EFI/OC/Resources/Audio VolumeAmplifier: 0 Multiplication coefficient for system volume to raw volume linear translation from 0 to 1000, see Configuration.pdf for more info on calculation Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyFiltering: NO Verifies and discards uninitialised data, mainly prevalent on 7 series Gigabyte boards KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with OpenUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Output: Relating to visual output TextRenderer: BuiltinGraphics Used for fixing resoltuion of OpenCore itself, Resolution must be set to Max to work correctly ConsoleMode: [Blank] Specifies Console output size, best to keep it blank Resolution: Max Sets OpenCore's resolution, Max will use the highest avalible reolution or can be specified (WxH@Bpp (e.g. 1920x1080@32) or WxH (e.g. 1920x1080)) ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that this is only required in cases when using System TextRenderer IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs, only relevant for users using System TextRenderer ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for graphical output once the kernel takes over DirectGopRendering: NO Use builtin graphics output protocol renderer for console, mainly relevant for MacPro5,1 users ReconnectOnResChange: NO ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: NO Fixes High resolutions displays that display OpenCore in 1024x768, only relevant for users using System TextRenderer Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 3000 - 5000 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: YES Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Sanity check: So thanks to the efforts of Ramus, we also have an amazing tool to help verify your config for those who may have missed something: Sanity Checker Intel BIOS settings Disable: Fast Boot VT-d (can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode DVMT Pre-Allocated(iGPU Memory): 64MB Post-install "},"config.plist/skylake.html":{"url":"config.plist/skylake.html","title":"Skylake","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Skylake Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide Starting Point So making a config.plist may seem hard, its not. It just takes some time but this guide will tell you how to configure eveything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore: All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default. The Sample.plist cannot be used As-Is, you must configure it to your system DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists! Now with all that, we'll need some things to get started: ProperTree: For editing our config, this editor has some super useful tools for OpenCore GenSMBIOS: For generating our SMBIOS Sample.plist: This is found under the Docs folder of the release download Now with those downloaded, we can get to really get started: Grab the Sample.plist and rename to config.plist Open your new config.plist in ProperTree macOS: ProperTree.command Windows: ProperTree.bat Run the Clean Snapshot function(Cmd/Ctrl + Shift + R and point it at your EFI/OC folder), This will remove all the entries from the config.plist and then adds all your SSDTs, Kexts and Firmware drivers to the config Cmd+R is another option that will add all your files as well but will leave entries disabled if they were set like that before, useful for when you're troubleshooting And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, its even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management on Haswell and newer, Clover alternative would be under Acpi -> GenerateOptions -> PluginType SSDT-EC-USBX Hides the Embedded controller and creates a fake one for macOS, needed for all Catalina users and recommended for other versions of macOS This SSDT also has a second function, USBX. This is used for forcing USB power properties, requires SSDT-EC so this just jumbles them together. Note that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/ACPI. For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This blocks certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore Quirk: Settings relating to ACPI, leave everything here as default. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio Quirks: Settings relating to boot.efi patching and firmware fixes, ones we need to change are RebuildAppleMemoryMap, SyncRuntimePermissions and SetupVirtualMap AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values and generally useful especially on HEDT and Xeon systems DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM, you can verify here if yours works DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectMemoryRegion: NO Needed for fixing artefacts and sleep-wake issues, generally only needed on very old firmwares ProtectSecureBoot: NO Fixes secureboot keys on MacPro5,1 and Insyde firmwares ProtectUefiServices: NO Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, Icelake and newer Coffeelake systems ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message RebuildAppleMemoryMap: YES Generates Memory Map compatible with macOS SetupVirtualMap: NO Fixes SetVirtualAddresses calls to virtual addresses, not needed on Skylake and newer. Some firmware like Gigabyte may still require it, and will kernel panic without this SignalAppleOS: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used SyncRuntimePermissions: YES Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for Skylake and newer DeviceProperties Add: Sets device properties from a map. This section is set up via WhateverGreen's Framebuffer Patching Guide and is used for fixing certain iGPU properties like ig-platform-id. The way we get the proper value for this is to look at the framebuffer we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA The two ig-platform-id's we use are as follows: 0x19120000 - this is used when the Desktop iGPU is used to drive a display 00001219 when hex-swapped 0x19120001 - this is used when the Desktop iGPU is only used for computing tasks and doesn't drive a display 01001219 when hex-swapped We also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. The first enables patching via WhateverGreen.kext, and the second sets the min stolen memory to 19MB. This is usually unnecessary, as this can be configured in BIOS(64MB recommended) but required when not available. Key Type Value AAPL,ig-platform-id Data 00001219 framebuffer-patch-enable Data 01000000 framebuffer-stolenmem Data 00003001 (This is an example for a desktop HD 530 without a dGPU and no BIOS options for iGPU memory) Special note: Mobile users should refer to mobile iGPU section for what properties should be used: iGPU Patching PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Block: Removes device properties from map, for us we can ignore this Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: Leave this blank CpuidData: Leave this blank Block: Blocks kexts from loading. Not relevant for us Patch: Patches both the kernel and kexts Quirks: Settings relating to the kernel, for us we'll be enabling AppleCpuPmCfgLock, AppleXcpmCfgLock, DisableIOMapper, PanicNoKextDump, PowerTimeoutKernelPanic and XhciPortLimit. Everything else should be left as default AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIoMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina DummyPowerManagement: NO New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management. Intel can ignore ExternalDiskIcons: NO External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this. Note this shouldn't be needed on Mojave and newer LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (Leave everything as default) HibernateMode: None Best to avoid hibernation with Hackintoshes all together PickerMode: Builtin Sets OpenCore to use the builtin picker HideAuxiliary: NO Hides Recovery and other partitions unless spacebar is pressed, more closely matches real Mac behaviour HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker ConsoleAttributes: 0 Sets OpenCore's UI color, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAttributes: 0 Used for setting custom picker attributes, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAudioAssist: NO Used for enabling VoiceOver like support in the picker, unless you want your hack talking to you keep this disabled PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use OpenUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key TakeoffDelay: 0 Used to add a delay for hotkeys when OpenCore is a bit to fast to register, 5000-10000 microseconds is the prefered range for users with broken hotkeys support Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection Debug: Helpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay) AppleDebug: YES Enables boot.efi logging, useful for debuuging. Note this is only supported on 10.15.4 and newer DisableWatchDog: YES Disables the UEFI watchdog, can help with early boot issues Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory, do not skip We'll be changing AllowNvramReset, AllowSetDefault, Vault and ScanPolicy AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a security risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore Vault: Optional We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USBs with this set to default Tools Used for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you. For us, we won't be using any tools Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: OpenShell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Won't be covered here, see 8.6 of Configuration.pdf for more info NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, mainly used for UI Scaling) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) DefaultBackgroundColor: Background color used by boot.efi 00000000: Syrah Black BFBFBF00: Light Gary 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100- this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can hopefully glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 03000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best security practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD, Intel and Kepler GPU users should delete this section. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX Key Type Value prev-lang:kbd String en-US:0 Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Skylake example, we'll choose the iMac17,1 SMBIOS. Note: Mobile users should refer to the SMBIOS page on which to choose: Mobile SMBIOS Run GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # iMac17,1 SMBIOS Info # ####################################################### Type: iMac17,1 Serial: C02S3HYWGG7L Board Serial: C02629102GUGPF7AD SmUUID: 3508AD44-B67D-4AD7-A109-7955130A1033 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want either an invalid serial or valid serial numbers but those not in use, you want to get a message back like: \"Invalid Serial\" or \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates Platforminfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections Generic: SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Only drivers present here should be: HfsPlus.efi ApfsDriverLoader.efi OpenRuntime.efi Audio: Related to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS AudioSupport: NO Used for enabling the audio port out, this requires AudioOut AudioDevice: [Blank] This will be the PciRoot of your audio device, gfxutil and debug log are great ways to find this AudioCodec: 0 Specify your audio codec address, can be found in either debug log or with under IOHDACodecAddress in IOService AudioOut: 0 Specifies which output is used, use the debug log to see what your board has Same idea, can be found in either debug log or with HdaCodecDump.efi MinimumVolume: 20 Default sound level for audio output PlayChime: NO Emulates the iconic Mac startup sound This also requires AXEFIAudio_VoiceOver_Boot.wav under EFI/OC/Resources/Audio VolumeAmplifier: 0 Multiplication coefficient for system volume to raw volume linear translation from 0 to 1000, see Configuration.pdf for more info on calculation Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyFiltering: NO Verifies and discards uninitialised data, mainly prevalent on 7 series Gigabyte boards KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with OpenUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Output: Relating to visual output TextRenderer: BuiltinGraphics Used for fixing resoltuion of OpenCore itself, Resolution must be set to Max to work correctly ConsoleMode: [Blank] Specifies Console output size, best to keep it blank Resolution: Max Sets OpenCore's resolution, Max will use the highest avalible reolution or can be specified (WxH@Bpp (e.g. 1920x1080@32) or WxH (e.g. 1920x1080)) ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that this is only required in cases when using System TextRenderer IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs, only relevant for users using System TextRenderer ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for graphical output once the kernel takes over DirectGopRendering: NO Use builtin graphics output protocol renderer for console, mainly relevant for MacPro5,1 users ReconnectOnResChange: NO ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: NO Fixes High resolutions displays that display OpenCore in 1024x768, only relevant for users using System TextRenderer Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 3000 - 5000 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: NO Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Sanity check: So thanks to the efforts of Ramus, we also have an amazing tool to help verify your config for those who may have missed something: Sanity Checker Intel BIOS settings Disable: Fast Boot VT-d (can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode DVMT Pre-Allocated(iGPU Memory): 64MB Post-install "},"config.plist/kaby-lake.html":{"url":"config.plist/kaby-lake.html","title":"Kaby Lake","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Kaby Lake Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide Starting Point So making a config.plist may seem hard, its not. It just takes some time but this guide will tell you how to configure eveything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore: All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default. The Sample.plist cannot be used As-Is, you must configure it to your system DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists! Now with all that, we'll need some things to get started: ProperTree: For editing our config, this editor has some super useful tools for OpenCore GenSMBIOS: For generating our SMBIOS Sample.plist: This is found under the Docs folder of the release download Now with those downloaded, we can get to really get started: Grab the Sample.plist and rename to config.plist Open your new config.plist in ProperTree macOS: ProperTree.command Windows: ProperTree.bat Run the Clean Snapshot function(Cmd/Ctrl + Shift + R and point it at your EFI/OC folder), This will remove all the entries from the config.plist and then adds all your SSDTs, Kexts and Firmware drivers to the config Cmd+R is another option that will add all your files as well but will leave entries disabled if they were set like that before, useful for when you're troubleshooting And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, its even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management on Haswell and newer, Clover alternative would be under Acpi -> GenerateOptions -> PluginType SSDT-EC-USBX Hides the Embedded controller and creates a fake one for macOS, needed for all Catalina users and recommended for other versions of macOS This SSDT also has a second function, USBX. This is used for forcing USB power properties, requires SSDT-EC so this just jumbles them together. Note that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/ACPI. For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This blocks certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore Quirk: Settings relating to ACPI, leave everything here as default. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio Quirks: Settings relating to boot.efi patching and firmware fixes, ones we need to change are RebuildAppleMemoryMap, SyncRuntimePermissions and SetupVirtualMap AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values and generally useful especially on HEDT and Xeon systems DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM, you can verify here if yours works DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectMemoryRegion: NO Needed for fixing artefacts and sleep-wake issues, generally only needed on very old firmwares ProtectSecureBoot: NO Fixes secureboot keys on MacPro5,1 and Insyde firmwares ProtectUefiServices: NO Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, Icelake and newer Coffeelake systems ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message RebuildAppleMemoryMap: YES Generates Memory Map compatible with macOS SetupVirtualMap: NO Fixes SetVirtualAddresses calls to virtual addresses, not needed on Skylake and newer. Some firmware like Gigabyte may still require it, and will kernel panic without this SignalAppleOS: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used SyncRuntimePermissions: YES Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for Skylake and newer DeviceProperties Add: Sets device properties from a map. This section is set up via WhateverGreen's Framebuffer Patching Guide and is used for fixing certain iGPU properties like ig-platform-id. The way we get the proper value for this is to look at the framebuffer we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA The two ig-platform-id's we use are as follows: 0x59120000 - this is used when the Desktop iGPU is used to drive a display 00001259 when hex-swapped 0x59120003 - this is used when the Desktop iGPU is only used for computing tasks and doesn't drive a display 03001259 when hex-swapped We also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. The first enables patching via WhateverGreen.kext, and the second sets the min stolen memory to 19MB. This is usually unnecessary, as this can be configured in BIOS(64MB recommended) but required when not available. Key Type Value AAPL,ig-platform-id Data 00001259 framebuffer-patch-enable Data 01000000 framebuffer-stolenmem Data 00003001 (This is an example for a desktop HD 630 without a dGPU and no BIOS options for iGPU memory) Special note: Mobile users should refer to mobile iGPU section for what properties should be used: iGPU Patching PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Block: Removes device properties from the map, for us we can ignore this Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: Leave this blank CpuidData: Leave this blank Block: Blocks kexts from loading. Not relevant for us Patch: Patches both the kernel and kexts Quirks: Settings relating to the kernel, for us we'll be enabling AppleCpuPmCfgLock, AppleXcpmCfgLock, DisableIOMapper, PanicNoKextDump, PowerTimeoutKernelPanic and XhciPortLimit. Everything else should be left as default AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIoMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina DummyPowerManagement: NO New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management. Intel can ignore ExternalDiskIcons: NO External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this. Note this shouldn't be needed on Mojave and newer LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (Leave everything as default) HibernateMode: None Best to avoid hibernation with Hackintoshes all together PickerMode: Builtin Sets OpenCore to use the builtin picker HideAuxiliary: NO Hides Recovery and other partitions unless spacebar is pressed, more closely matches real Mac behaviour HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker ConsoleAttributes: 0 Sets OpenCore's UI color, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAttributes: 0 Used for setting custom picker attributes, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAudioAssist: NO Used for enabling VoiceOver like support in the picker, unless you want your hack talking to you keep this disabled PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use OpenUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key TakeoffDelay: 0 Used to add a delay for hotkeys when OpenCore is a bit to fast to register, 5000-10000 microseconds is the prefered range for users with broken hotkeys support Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection Debug: Helpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay) AppleDebug: YES Enables boot.efi logging, useful for debuuging. Note this is only supported on 10.15.4 and newer DisableWatchDog: YES Disables the UEFI watchdog, can help with early boot issues Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory, do not skip We'll be changing AllowNvramReset, AllowSetDefault, Vault and ScanPolicy AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a security risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore Vault: Optional We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USBs with this set to default Tools Used for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you. For us, we won't be using any tools Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: OpenShell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Won't be covered here, see 8.6 of Configuration.pdf for more info NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, mainly used for UI Scaling) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) DefaultBackgroundColor: Background color used by boot.efi 00000000: Syrah Black BFBFBF00: Light Gary 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100- this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can hopefully glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 03000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best security practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD, Intel and Kepler GPU users should delete this section. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX Key Type Value prev-lang:kbd String en-US:0 Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Kaby Lake example, we'll chose the iMac18,1 SMBIOS - this is done intentionally for compatibility's sake. There are two main SMBIOS used for Kaby Lake: iMac18,1 - this is used for computers utilizing the iGPU for displaying. iMac18,3 - this is used for computers using a dGPU for displaying, and an iGPU for computing tasks only. Note: Mobile users should refer to the SMBIOS page on which to choose: Mobile SMBIOS Run GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # iMac18,1 SMBIOS Info # ####################################################### Type: iMac18,1 Serial: C02Z2CZ5H7JY Board Serial: C02928701GUH69FFB SmUUID: AA043F8D-33B6-4A1A-94F7-46972AAD0607 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want either an invalid serial or valid serial numbers but those not in use, you want to get a message back like: \"Invalid Serial\" or \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates Platforminfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections Generic: SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Only drivers present here should be: HfsPlus.efi ApfsDriverLoader.efi OpenRuntime.efi Audio: Related to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS AudioSupport: NO Used for enabling the audio port out, this requires AudioOut AudioDevice: [Blank] This will be the PciRoot of your audio device, gfxutil and debug log are great ways to find this AudioCodec: 0 Specify your audio codec address, can be found in either debug log or with under IOHDACodecAddress in IOService AudioOut: 0 Specifies which output is used, use the debug log to see what your board has Same idea, can be found in either debug log or with HdaCodecDump.efi MinimumVolume: 20 Default sound level for audio output PlayChime: NO Emulates the iconic Mac startup sound This also requires AXEFIAudio_VoiceOver_Boot.wav under EFI/OC/Resources/Audio VolumeAmplifier: 0 Multiplication coefficient for system volume to raw volume linear translation from 0 to 1000, see Configuration.pdf for more info on calculation Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyFiltering: NO Verifies and discards uninitialised data, mainly prevalent on 7 series Gigabyte boards KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with OpenUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Output: Relating to visual output TextRenderer: BuiltinGraphics Used for fixing resoltuion of OpenCore itself, Resolution must be set to Max to work correctly ConsoleMode: [Blank] Specifies Console output size, best to keep it blank Resolution: Max Sets OpenCore's resolution, Max will use the highest avalible reolution or can be specified (WxH@Bpp (e.g. 1920x1080@32) or WxH (e.g. 1920x1080)) ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that this is only required in cases when using System TextRenderer IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs, only relevant for users using System TextRenderer ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for graphical output once the kernel takes over DirectGopRendering: NO Use builtin graphics output protocol renderer for console, mainly relevant for MacPro5,1 users ReconnectOnResChange: NO ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: NO Fixes High resolutions displays that display OpenCore in 1024x768, only relevant for users using System TextRenderer Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 3000 - 5000 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: NO Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Sanity check: So thanks to the efforts of Ramus, we also have an amazing tool to help verify your config for those who may have missed something: Sanity Checker Intel BIOS settings Disable: Fast Boot VT-d (can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode DVMT Pre-Allocated(iGPU Memory): 64MB Post-install "},"config.plist/coffee-lake.html":{"url":"config.plist/coffee-lake.html","title":"Coffee Lake","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Coffee Lake Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide Starting Point So making a config.plist may seem hard, its not. It just takes some time but this guide will tell you how to configure eveything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore: All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default. The Sample.plist cannot be used As-Is, you must configure it to your system DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists! Now with all that, we'll need some things to get started: ProperTree: For editing our config, this editor has some super useful tools for OpenCore GenSMBIOS: For generating our SMBIOS Sample.plist: This is found under the Docs folder of the release download Now with those downloaded, we can get to really get started: Grab the Sample.plist and rename to config.plist Open your new config.plist in ProperTree macOS: ProperTree.command Windows: ProperTree.bat Run the Clean Snapshot function(Cmd/Ctrl + Shift + R and point it at your EFI/OC folder), This will remove all the entries from the config.plist and then adds all your SSDTs, Kexts and Firmware drivers to the config Cmd+R is another option that will add all your files as well but will leave entries disabled if they were set like that before, useful for when you're troubleshooting And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, its even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management on Haswell and newer, Clover alternative would be under Acpi -> GenerateOptions -> PluginType SSDT-EC-USBX Hides the Embedded controller and creates a fake one for macOS, needed for all Catalina users and recommended for other versions of macOS This SSDT also has a second function, USBX. This is used for forcing USB power properties, requires SSDT-EC so this just jumbles them together. SSDT-AWAC This is the 300 series RTC patch, required for most B360, B365, H310, H370, Z390 and some Z370 boards which prevent systems from booting macOS. The alternative is SSDT-RTC0 for when AWAC SSDT is incompatible due to missing the Legacy RTC clock, to check whether you need it and which to use please see Getting started with ACPI page. SSDT-PMC So true 300 series motherboards(non-Z370) don't declare the FW chip as MMIO in ACPI and so XNU ignores the MMIO region declared by the UEFI memory map. This SSDT brings back NVRAM support and uses the scope PCI0.LPCB, this is the most common scope so a pre-made can be found here: SSDT-PMC.aml Note that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/ACPI. For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This blocks certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore Quirk: Settings relating to ACPI, leave everything here as default. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing devices to be passthrough to macOS that are generally ignored, for us we can ignore this section. Quirks: Settings relating to boot.efi patching and firmware fixes, ones we need to change are DevirtualiseMmio, RebuildAppleMemoryMap, SyncRuntimePermissions and SetupVirtualMap AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: YES Reduces Stolen Memory Footprint, expands options for slide=N values and very helpful with fixing Memory Allocation issues on Z390. Requires ProtectUefiServices as well on IceLake and Z390 Coffeelake DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM, you can verify here if yours works DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectMemoryRegion: NO Needed for fixing artefacts and sleep-wake issues, generally only needed on very old firmwares ProtectSecureBoot: NO Fixes secureboot keys on MacPro5,1 and Insyde firmwares ProtectUefiServices: NO Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, Icelake and Z390 systems' If on Z390, enable this quirk ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message RebuildAppleMemoryMap: YES Generates Memory Map compatible with macOS SetupVirtualMap: NO Fixes SetVirtualAddresses calls to virtual addresses, not needed on Skylake and newer. Some firmware like Gigabyte may still require it, and will kernel panic without this SignalAppleOS: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used SyncRuntimePermissions: YES Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for Skylake and newer DeviceProperties Add: Sets device properties from a map. This section is set up via WhateverGreen's Framebuffer Patching Guide and is used for fixing certain iGPU properties like ig-platform-id. The way we get the proper value for this is to look at the framebuffer we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA The two ig-platform-id's we use are as follows: 0x3E9B0007 - this is used when the Desktop iGPU is used to drive a display 07009B3E when hex-swapped 0x3E920003 - this is used when the Desktop iGPU is only used for computing tasks and doesn't drive a display 0300923E when hex-swapped Worth noting that for 10.12 -> 10.13.5, you would need to fake the iGPU to the same values in the Kaby Lake guide, as this was before native Coffee Lake iGPU showed up. 10.13.6 natively supports Coffee Lake We also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. The first enables patching via WhateverGreen.kext, and the second sets the min stolen memory to 19MB. This is usually unnecessary, as this can be configured in BIOS(64MB recommended) but required when not available. For users with black screen issues after verbose on B360, B365, H310, H370, Z390, please see the BusID iGPU patching page Key Type Value AAPL,ig-platform-id Data 07009B3E framebuffer-patch-enable Data 01000000 framebuffer-stolenmem Data 00003001 (This is an example for a desktop UHD 630 without a dGPU and no BIOS options for iGPU memory) Special note: Mobile users should refer to mobile iGPU section for what properties should be used: iGPU Patching PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Block: Removes device properties from the map, for us we can ignore this Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: Leave this blank CpuidData: Leave this blank Block: Blocks kexts from loading. Not relevant for us Patch: Patches both the kernel and kexts Quirks: Settings relating to the kernel, for us we'll be enabling AppleCpuPmCfgLock, AppleXcpmCfgLock, DisableIOMapper, PanicNoKextDump, PowerTimeoutKernelPanic and XhciPortLimit. Everything else should be left as default AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIoMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina DummyPowerManagement: NO New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management. Intel can ignore ExternalDiskIcons: NO External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this. Note this shouldn't be needed on Mojave and newer LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (Leave everything as default) HibernateMode: None Best to avoid hibernation with Hackintoshes all together PickerMode: Builtin Sets OpenCore to use the builtin picker HideAuxiliary: NO Hides Recovery and other partitions unless spacebar is pressed, more closely matches real Mac behaviour HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker ConsoleAttributes: 0 Sets OpenCore's UI color, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAttributes: 0 Used for setting custom picker attributes, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAudioAssist: NO Used for enabling VoiceOver like support in the picker, unless you want your hack talking to you keep this disabled PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use OpenUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key TakeoffDelay: 0 Used to add a delay for hotkeys when OpenCore is a bit to fast to register, 5000-10000 microseconds is the prefered range for users with broken hotkeys support Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection Debug: Helpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay) AppleDebug: YES Enables boot.efi logging, useful for debuuging. Note this is only supported on 10.15.4 and newer DisableWatchDog: YES Disables the UEFI watchdog, can help with early boot issues Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory, do not skip We'll be changing AllowNvramReset, AllowSetDefault, Vault and ScanPolicy AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a security risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore Vault: Optional We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USBs with this set to default Tools Used for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you. For us, we won't be using any tools Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: OpenShell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Won't be covered here, see 8.6 of Configuration.pdf for more info NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, mainly used for UI Scaling) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) DefaultBackgroundColor: Background color used by boot.efi 00000000: Syrah Black BFBFBF00: Light Gary 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100- this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can hopefully glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 03000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best security practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD, Intel and Kepler GPU users should delete this section. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX Key Type Value prev-lang:kbd String en-US:0 Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Coffee Lake example, I chose the iMac19,1 SMBIOS - this is done intentionally for compatibility's sake. There are two main SMBIOS used for Coffee Lake: iMac19,1 - For Mojave and newer iMac18,3 - For High Sierra and older You'll use 18,3 when you have a Pascal or Maxwell dGPU and are limited to versions of macOs with Web Drivers Note: Mobile users should refer to the SMBIOS page on which to choose: Mobile SMBIOS Run GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # iMac19,1 SMBIOS Info # ####################################################### Type: iMac19,1 Serial: C02XG0FDH7JY Board Serial: C02839303QXH69FJA SmUUID: DBB364D6-44B2-4A02-B922-AB4396F16DA8 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want either an invalid serial or valid serial numbers but those not in use, you want to get a message back like: \"Invalid Serial\" or \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates Platforminfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections Generic: SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Only drivers present here should be: HfsPlus.efi ApfsDriverLoader.efi OpenRuntime.efi Audio: Related to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS AudioSupport: NO Used for enabling the audio port out, this requires AudioOut AudioDevice: [Blank] This will be the PciRoot of your audio device, gfxutil and debug log are great ways to find this AudioCodec: 0 Specify your audio codec address, can be found in either debug log or with under IOHDACodecAddress in IOService AudioOut: 0 Specifies which output is used, use the debug log to see what your board has Same idea, can be found in either debug log or with HdaCodecDump.efi MinimumVolume: 20 Default sound level for audio output PlayChime: NO Emulates the iconic Mac startup sound This also requires AXEFIAudio_VoiceOver_Boot.wav under EFI/OC/Resources/Audio VolumeAmplifier: 0 Multiplication coefficient for system volume to raw volume linear translation from 0 to 1000, see Configuration.pdf for more info on calculation Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyFiltering: NO Verifies and discards uninitialised data, mainly prevalent on 7 series Gigabyte boards KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with OpenUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Output: Relating to visual output TextRenderer: BuiltinGraphics Used for fixing resoltuion of OpenCore itself, Resolution must be set to Max to work correctly ConsoleMode: [Blank] Specifies Console output size, best to keep it blank Resolution: Max Sets OpenCore's resolution, Max will use the highest avalible reolution or can be specified (WxH@Bpp (e.g. 1920x1080@32) or WxH (e.g. 1920x1080)) ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that this is only required in cases when using System TextRenderer IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs, only relevant for users using System TextRenderer ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for graphical output once the kernel takes over DirectGopRendering: NO Use builtin graphics output protocol renderer for console, mainly relevant for MacPro5,1 users ReconnectOnResChange: NO ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: NO Fixes High resolutions displays that display OpenCore in 1024x768, only relevant for users using System TextRenderer Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 3000 - 5000 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: NO Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Sanity check: So thanks to the efforts of Ramus, we also have an amazing tool to help verify your config for those who may have missed something: Sanity Checker Intel BIOS settings Disable: Fast Boot VT-d (can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode DVMT Pre-Allocated(iGPU Memory): 64MB Post-install "},"config-HEDT/haswell-e.html":{"url":"config-HEDT/haswell-e.html","title":"Haswell-E","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Haswell-E Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide Starting Point So making a config.plist may seem hard, its not. It just takes some time but this guide will tell you how to configure eveything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore: All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default. The Sample.plist cannot be used As-Is, you must configure it to your system DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists! Now with all that, we'll need some things to get started: ProperTree: For editing our config, this editor has some super useful tools for OpenCore GenSMBIOS: For generating our SMBIOS Sample.plist: This is found under the Docs folder of the release download Now with those downloaded, we can get to really get started: Grab the Sample.plist and rename to config.plist Open your new config.plist in ProperTree macOS: ProperTree.command Windows: ProperTree.bat Run the Clean Snapshot function(Cmd/Ctrl + Shift + R and point it at your EFI/OC folder), This will remove all the entries from the config.plist and then adds all your SSDTs, Kexts and Firmware drivers to the config Cmd+R is another option that will add all your files as well but will leave entries disabled if they were set like that before, useful for when you're troubleshooting And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, its even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management on Haswell and newer, Clover alternative would be under Acpi -> GenerateOptions -> PluginType SSDT-EC Hides the Embedded controller and creates a fake one for macOS, needed for all Catalina users and recommended for other versions of macOS Note that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/ACPI. For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This blocks certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore Quirk: Settings relating to ACPI, leave everything here as default. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing devices to be passthrough to macOS that are generally ignored, for us we can ignore this section. Quirks: Settings relating to boot.efi patching and firmware fixes, ones we need to change are DevirtualiseMmio, DisableVariableWrite and RebuildAppleMemoryMap AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: YES Reduces Stolen Memory Footprint, expands options for slide=N values and generally useful especially on HEDT and Xeon systems DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: YES Needed for systems with non-functioning NVRAM, you can verify here if yours works. For X99 we'll assume NVRAM doesn't work but post install you can double check DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectMemoryRegion: NO Needed for fixing artefacts and sleep-wake issues, generally only needed on very old firmwares ProtectSecureBoot: NO Fixes secureboot keys on MacPro5,1 and Insyde firmwares ProtectUefiServices: NO Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, Icelake and newer Coffeelake systems ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message RebuildAppleMemoryMap: YES Generates Memory Map compatible with macOS SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses, not needed on Skylake and newer SignalAppleOS: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used SyncRuntimePermissions: NO Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for Skylake and newer. Mainly relevant for Skylake and newer DeviceProperties Add: Sets device properties from a map. By default, the Sample.plist has this section set for iGPU and Audio. We have no iGPU so PCIRoot PciRoot(0x0)/Pci(0x2,0x0) can be removed from Add section. For audio we'll be setting the layout in the boot-args section, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from both Add and Block sections TL;DR, delete all the PciRoot's here as we won't be using this section. Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs and enabling power management on Haswell-E and Boardwell-E Haswell E: Cpuid1Data﻿: C3060300 00000000 00000000 00000000 Cpuid1Mask: FFFFFFFF 00000000 00000000 00000000 Block: Blocks kexts from loading. Not relevant for us Patch: Patches both the kernel and kexts Quirks: Settings relating to the kernel, for us we'll be enabling AppleCpuPmCfgLock, AppleXcpmCfgLock, DisableIOMapper, PanicNoKextDump, PowerTimeoutKernelPanic and XhciPortLimit. Everything else should be left as default AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: YES Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. Required for Broadwell-E and lower AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIoMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina DummyPowerManagement: NO New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management. Intel can ignore ExternalDiskIcons: NO External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this. Note this shouldn't be needed on Mojave and newer LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (Leave everything as default) HibernateMode: None Best to avoid hibernation with Hackintoshes all together PickerMode: Builtin Sets OpenCore to use the builtin picker HideAuxiliary: NO Hides Recovery and other partitions unless spacebar is pressed, more closely matches real Mac behaviour HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker ConsoleAttributes: 0 Sets OpenCore's UI color, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAttributes: 0 Used for setting custom picker attributes, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAudioAssist: NO Used for enabling VoiceOver like support in the picker, unless you want your hack talking to you keep this disabled PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use OpenUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key TakeoffDelay: 0 Used to add a delay for hotkeys when OpenCore is a bit to fast to register, 5000-10000 microseconds is the prefered range for users with broken hotkeys support Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection Debug: Helpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay) AppleDebug: YES Enables boot.efi logging, useful for debuuging. Note this is only supported on 10.15.4 and newer DisableWatchDog: YES Disables the UEFI watchdog, can help with early boot issues Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory, do not skip We'll be changing AllowNvramReset, AllowSetDefault, Vault and ScanPolicy AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a security risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore Vault: Optional We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USBs with this set to default Tools Used for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you. For us, we won't be using any tools Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: OpenShell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Won't be covered here, see 8.6 of Configuration.pdf for more info NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, mainly used for UI Scaling) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) DefaultBackgroundColor: Background color used by boot.efi 00000000: Syrah Black BFBFBF00: Light Gary 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100- this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can hopefully glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 03000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best security practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD, Intel and Kepler GPU users should delete this section. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX Key Type Value prev-lang:kbd String en-US:0 Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Haswell-E example, we'll choose the iMacPro1,1 SMBIOS. Run GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # iMacPro1,1 SMBIOS Info # ####################################################### Type: iMacPro1,1 Serial: C02YX0TZHX87 Board Serial: C029269024NJG36CB SmUUID: DEA17B2D-2F9F-4955-B266-A74C47678AD3 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want either an invalid serial or valid serial numbers but those not in use, you want to get a message back like: \"Invalid Serial\" or \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates Platforminfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections Generic: SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Only drivers present here should be: HfsPlus.efi ApfsDriverLoader.efi OpenRuntime.efi Audio: Related to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS AudioSupport: NO Used for enabling the audio port out, this requires AudioOut AudioDevice: [Blank] This will be the PciRoot of your audio device, gfxutil and debug log are great ways to find this AudioCodec: 0 Specify your audio codec address, can be found in either debug log or with under IOHDACodecAddress in IOService AudioOut: 0 Specifies which output is used, use the debug log to see what your board has Same idea, can be found in either debug log or with HdaCodecDump.efi MinimumVolume: 20 Default sound level for audio output PlayChime: NO Emulates the iconic Mac startup sound This also requires AXEFIAudio_VoiceOver_Boot.wav under EFI/OC/Resources/Audio VolumeAmplifier: 0 Multiplication coefficient for system volume to raw volume linear translation from 0 to 1000, see Configuration.pdf for more info on calculation Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyFiltering: NO Verifies and discards uninitialised data, mainly prevalent on 7 series Gigabyte boards KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with OpenUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Output: Relating to visual output TextRenderer: BuiltinGraphics Used for fixing resoltuion of OpenCore itself, Resolution must be set to Max to work correctly ConsoleMode: [Blank] Specifies Console output size, best to keep it blank Resolution: Max Sets OpenCore's resolution, Max will use the highest avalible reolution or can be specified (WxH@Bpp (e.g. 1920x1080@32) or WxH (e.g. 1920x1080)) ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that this is only required in cases when using System TextRenderer IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs, only relevant for users using System TextRenderer ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for graphical output once the kernel takes over DirectGopRendering: NO Use builtin graphics output protocol renderer for console, mainly relevant for MacPro5,1 users ReconnectOnResChange: NO ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: NO Fixes High resolutions displays that display OpenCore in 1024x768, only relevant for users using System TextRenderer Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 3000 - 5000 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: YES Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Sanity check: So thanks to the efforts of Ramus, we also have an amazing tool to help verify your config for those who may have missed something: Sanity Checker Intel BIOS settings Disable: Fast Boot VT-d (can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode Post-install "},"config-HEDT/broadwell-e.html":{"url":"config-HEDT/broadwell-e.html","title":"Broadwell-E","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Broadwell-E Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide Starting Point So making a config.plist may seem hard, its not. It just takes some time but this guide will tell you how to configure eveything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore: All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default. The Sample.plist cannot be used As-Is, you must configure it to your system DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists! Now with all that, we'll need some things to get started: ProperTree: For editing our config, this editor has some super useful tools for OpenCore GenSMBIOS: For generating our SMBIOS Sample.plist: This is found under the Docs folder of the release download Now with those downloaded, we can get to really get started: Grab the Sample.plist and rename to config.plist Open your new config.plist in ProperTree macOS: ProperTree.command Windows: ProperTree.bat Run the Clean Snapshot function(Cmd/Ctrl + Shift + R and point it at your EFI/OC folder), This will remove all the entries from the config.plist and then adds all your SSDTs, Kexts and Firmware drivers to the config Cmd+R is another option that will add all your files as well but will leave entries disabled if they were set like that before, useful for when you're troubleshooting And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, its even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management on Haswell and newer, Clover alternative would be under Acpi -> GenerateOptions -> PluginType SSDT-EC Hides the Embedded controller and creates a fake one for macOS, needed for all Catalina users and recommended for other versions of macOS Note that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/ACPI. For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This blocks certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore Quirk: Settings relating to ACPI, leave everything here as default. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing devices to be passthrough to macOS that are generally ignored, for us we can ignore this section. Quirks: Settings relating to boot.efi patching and firmware fixes, ones we need to change are DevirtualiseMmio, DisableVariableWrite and RebuildAppleMemoryMap AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: YES Reduces Stolen Memory Footprint, expands options for slide=N values and generally useful especially on HEDT and Xeon systems DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: YES Needed for systems with non-functioning NVRAM, you can verify here if yours works. For X99 we'll assume NVRAM doesn't work but post install you can double check DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectMemoryRegion: NO Needed for fixing artefacts and sleep-wake issues, generally only needed on very old firmwares ProtectSecureBoot: NO Fixes secureboot keys on MacPro5,1 and Insyde firmwares ProtectUefiServices: NO Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, Icelake and newer Coffeelake systems ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message RebuildAppleMemoryMap: YES Generates Memory Map compatible with macOS, recommeneded for ATPIO IV firmwares and HEDT platforms SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses, not needed on Skylake and newer SignalAppleOS: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used SyncRuntimePermissions: NO Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for Skylake and newer DeviceProperties Add: Sets device properties from a map. By default, the Sample.plist has this section set for iGPU and Audio. We have no iGPU so PCIRoot PciRoot(0x0)/Pci(0x2,0x0) can be removed from Add section. For audio we'll be setting the layout in the boot-args section, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from both Add and Block sections TL;DR, delete all the PciRoot's here as we won't be using this section. Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs and enabling power management on Haswell-E and Boardwell-E Broadwell E: Cpuid1Data﻿: D4060300﻿ 00000000 00000000 00000000 Cpuid1Mask: FFFFFFFF 00000000 00000000 00000000 Block: Blocks kexts from loading. Not relevant for us Patch: Patches both the kernel and kexts Quirks: Settings relating to the kernel, for us we'll be enabling AppleCpuPmCfgLock, AppleXcpmCfgLock, DisableIOMapper, PanicNoKextDump, PowerTimeoutKernelPanic and XhciPortLimit. Everything else should be left as default AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: YES Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. Required for Broadwell-E and lower AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIoMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina DummyPowerManagement: NO New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management. Intel can ignore ExternalDiskIcons: NO External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this. Note this shouldn't be needed on Mojave and newer LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (Leave everything as default) HibernateMode: None Best to avoid hibernation with Hackintoshes all together PickerMode: Builtin Sets OpenCore to use the builtin picker HideAuxiliary: NO Hides Recovery and other partitions unless spacebar is pressed, more closely matches real Mac behaviour HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker ConsoleAttributes: 0 Sets OpenCore's UI color, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAttributes: 0 Used for setting custom picker attributes, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAudioAssist: NO Used for enabling VoiceOver like support in the picker, unless you want your hack talking to you keep this disabled PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use OpenUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key TakeoffDelay: 0 Used to add a delay for hotkeys when OpenCore is a bit to fast to register, 5000-10000 microseconds is the prefered range for users with broken hotkeys support Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection Debug: Helpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay) AppleDebug: YES Enables boot.efi logging, useful for debuuging. Note this is only supported on 10.15.4 and newer DisableWatchDog: YES Disables the UEFI watchdog, can help with early boot issues Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory, do not skip We'll be changing AllowNvramReset, AllowSetDefault, Vault and ScanPolicy AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a security risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore Vault: Optional We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USBs with this set to default Tools Used for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you. For us, we won't be using any tools Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: OpenShell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Won't be covered here, see 8.6 of Configuration.pdf for more info NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, mainly used for UI Scaling) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) DefaultBackgroundColor: Background color used by boot.efi 00000000: Syrah Black BFBFBF00: Light Gary 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100- this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can hopefully glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 03000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best security practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD, Intel and Kepler GPU users should delete this section. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX Key Type Value prev-lang:kbd String en-US:0 Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Broadwell-E example, we'll choose the iMacPro1,1 SMBIOS. Run GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # iMacPro1,1 SMBIOS Info # ####################################################### Type: iMacPro1,1 Serial: C02YX0TZHX87 Board Serial: C029269024NJG36CB SmUUID: DEA17B2D-2F9F-4955-B266-A74C47678AD3 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want either an invalid serial or valid serial numbers but those not in use, you want to get a message back like: \"Invalid Serial\" or \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates Platforminfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections Generic: SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Only drivers present here should be: HfsPlus.efi ApfsDriverLoader.efi OpenRuntime.efi Audio: Related to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS AudioSupport: NO Used for enabling the audio port out, this requires AudioOut AudioDevice: [Blank] This will be the PciRoot of your audio device, gfxutil and debug log are great ways to find this AudioCodec: 0 Specify your audio codec address, can be found in either debug log or with under IOHDACodecAddress in IOService AudioOut: 0 Specifies which output is used, use the debug log to see what your board has Same idea, can be found in either debug log or with HdaCodecDump.efi MinimumVolume: 20 Default sound level for audio output PlayChime: NO Emulates the iconic Mac startup sound This also requires AXEFIAudio_VoiceOver_Boot.wav under EFI/OC/Resources/Audio VolumeAmplifier: 0 Multiplication coefficient for system volume to raw volume linear translation from 0 to 1000, see Configuration.pdf for more info on calculation Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyFiltering: NO Verifies and discards uninitialised data, mainly prevalent on 7 series Gigabyte boards KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with OpenUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Output: Relating to visual output TextRenderer: BuiltinGraphics Used for fixing resoltuion of OpenCore itself, Resolution must be set to Max to work correctly ConsoleMode: [Blank] Specifies Console output size, best to keep it blank Resolution: Max Sets OpenCore's resolution, Max will use the highest avalible reolution or can be specified (WxH@Bpp (e.g. 1920x1080@32) or WxH (e.g. 1920x1080)) ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that this is only required in cases when using System TextRenderer IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs, only relevant for users using System TextRenderer ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for graphical output once the kernel takes over DirectGopRendering: NO Use builtin graphics output protocol renderer for console, mainly relevant for MacPro5,1 users ReconnectOnResChange: NO ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: NO Fixes High resolutions displays that display OpenCore in 1024x768, only relevant for users using System TextRenderer Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 3000 - 5000 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: YES Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Sanity check: So thanks to the efforts of Ramus, we also have an amazing tool to help verify your config for those who may have missed something: Sanity Checker Intel BIOS settings Disable: Fast Boot VT-d (can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode Post-install "},"config-HEDT/skylake-x.html":{"url":"config-HEDT/skylake-x.html","title":"Skylake-X","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Skylake-X Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide Starting Point So making a config.plist may seem hard, its not. It just takes some time but this guide will tell you how to configure eveything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore: All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default. The Sample.plist cannot be used As-Is, you must configure it to your system DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists! Now with all that, we'll need some things to get started: ProperTree: For editing our config, this editor has some super useful tools for OpenCore GenSMBIOS: For generating our SMBIOS Sample.plist: This is found under the Docs folder of the release download Now with those downloaded, we can get to really get started: Grab the Sample.plist and rename to config.plist Open your new config.plist in ProperTree macOS: ProperTree.command Windows: ProperTree.bat Run the Clean Snapshot function(Cmd/Ctrl + Shift + R and point it at your EFI/OC folder), This will remove all the entries from the config.plist and then adds all your SSDTs, Kexts and Firmware drivers to the config Cmd+R is another option that will add all your files as well but will leave entries disabled if they were set like that before, useful for when you're troubleshooting And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, its even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management on Haswell and newer, Clover alternative would be under Acpi -> GenerateOptions -> PluginType SSDT-EC-USBX Hides the Embedded controller and creates a fake one for macOS, needed for all Catalina users and recommended for other versions of macOS This SSDT also has a second function, USBX. This is used for forcing USB power properties, requires SSDT-EC so this just jumbles them together. SSDT-AWAC This is the 300 series RTC patch, required for some X299 boards which prevent systems from booting macOS. The alternative is SSDT-RTC0 for when AWAC SSDT is incompatible due to missing the Legacy RTC clock, to check whether you need it and which to use please see Getting started with ACPI page. Mainly Gigabyte's X299X and AsRock boards require AWAC patching Note that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/ACPI. For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This blocks certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore Quirk: Settings relating to ACPI, leave everything here as default. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing devices to be passthrough to macOS that are generally ignored, for us we can ignore this section. Quirks: Settings relating to boot.efi patching and firmware fixes, ones we need to change are DevirtualiseMmio, RebuildAppleMemoryMap, SyncRuntimePermissions and SetupVirtualMap AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: YES Reduces Stolen Memory Footprint, expands options for slide=N values and generally useful especially on HEDT and Xeon systems DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM, you can verify here if yours works DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectMemoryRegion: NO Needed for fixing artefacts and sleep-wake issues, generally only needed on very old firmwares ProtectSecureBoot: NO Fixes secureboot keys on MacPro5,1 and Insyde firmwares ProtectUefiServices: NO Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, Icelake and newer Coffeelake systems ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message RebuildAppleMemoryMap: YES Generates Memory Map compatible with macOS SetupVirtualMap: NO Fixes SetVirtualAddresses calls to virtual addresses, not needed on Skylake and newer. Some firmware like Gigabyte may still require it, and will kernel panic without this SignalAppleOS: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used SyncRuntimePermissions: YES Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for Skylake and newer DeviceProperties Add: Sets device properties from a map. By default, the Sample.plist has this section set for iGPU and Audio. We have no iGPU so PCIRoot PciRoot(0x0)/Pci(0x2,0x0) can be removed from Add section. For audio we'll be setting the layout in the boot-args section, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from both Add and Block sections TL;DR, delete all the PciRoot's here as we won't be using this section. Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs, thankfully both Skylake-X and Cascade Lake-X have the same CPU ID as Xeon W chips which ship in the iMac Pro. So here we'll leave it blank Block: Blocks kexts from loading. Not relevant for us Patch: Patches both the kernel and kexts Quirks: Settings relating to the kernel, for us we'll be enabling AppleCpuPmCfgLock, AppleXcpmCfgLock, DisableIOMapper, PanicNoKextDump, PowerTimeoutKernelPanic and XhciPortLimit. Everything else should be left as default AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. Skylake-X can ignore AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIoMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina DummyPowerManagement: NO New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management. Intel can ignore ExternalDiskIcons: NO External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this. Note this shouldn't be needed on Mojave and newer LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (Leave everything as default) HibernateMode: None Best to avoid hibernation with Hackintoshes all together PickerMode: Builtin Sets OpenCore to use the builtin picker HideAuxiliary: NO Hides Recovery and other partitions unless spacebar is pressed, more closely matches real Mac behaviour HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker ConsoleAttributes: 0 Sets OpenCore's UI color, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAttributes: 0 Used for setting custom picker attributes, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAudioAssist: NO Used for enabling VoiceOver like support in the picker, unless you want your hack talking to you keep this disabled PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use OpenUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key TakeoffDelay: 0 Used to add a delay for hotkeys when OpenCore is a bit to fast to register, 5000-10000 microseconds is the prefered range for users with broken hotkeys support Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection Debug: Helpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay) AppleDebug: YES Enables boot.efi logging, useful for debuuging. Note this is only supported on 10.15.4 and newer DisableWatchDog: YES Disables the UEFI watchdog, can help with early boot issues Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory, do not skip We'll be changing AllowNvramReset, AllowSetDefault, Vault and ScanPolicy AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a security risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore Vault: Optional We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USBs with this set to default Tools Used for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you. For us, we won't be using any tools Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: OpenShell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Won't be covered here, see 8.6 of Configuration.pdf for more info NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, mainly used for UI Scaling) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) DefaultBackgroundColor: Background color used by boot.efi 00000000: Syrah Black BFBFBF00: Light Gary 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100- this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can hopefully glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 03000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best security practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD, Intel and Kepler GPU users should delete this section. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX Key Type Value prev-lang:kbd String en-US:0 Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Skylake-X example, we'll choose the iMacPro1,1 SMBIOS. Run GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # iMacPro1,1 SMBIOS Info # ####################################################### Type: iMacPro1,1 Serial: C02YX0TZHX87 Board Serial: C029269024NJG36CB SmUUID: DEA17B2D-2F9F-4955-B266-A74C47678AD3 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want either an invalid serial or valid serial numbers but those not in use, you want to get a message back like: \"Invalid Serial\" or \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates Platforminfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections Generic: SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Only drivers present here should be: HfsPlus.efi ApfsDriverLoader.efi OpenRuntime.efi Audio: Related to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS AudioSupport: NO Used for enabling the audio port out, this requires AudioOut AudioDevice: [Blank] This will be the PciRoot of your audio device, gfxutil and debug log are great ways to find this AudioCodec: 0 Specify your audio codec address, can be found in either debug log or with under IOHDACodecAddress in IOService AudioOut: 0 Specifies which output is used, use the debug log to see what your board has Same idea, can be found in either debug log or with HdaCodecDump.efi MinimumVolume: 20 Default sound level for audio output PlayChime: NO Emulates the iconic Mac startup sound This also requires AXEFIAudio_VoiceOver_Boot.wav under EFI/OC/Resources/Audio VolumeAmplifier: 0 Multiplication coefficient for system volume to raw volume linear translation from 0 to 1000, see Configuration.pdf for more info on calculation Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyFiltering: NO Verifies and discards uninitialised data, mainly prevalent on 7 series Gigabyte boards KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with OpenUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Output: Relating to visual output TextRenderer: BuiltinGraphics Used for fixing resoltuion of OpenCore itself, Resolution must be set to Max to work correctly ConsoleMode: [Blank] Specifies Console output size, best to keep it blank Resolution: Max Sets OpenCore's resolution, Max will use the highest avalible reolution or can be specified (WxH@Bpp (e.g. 1920x1080@32) or WxH (e.g. 1920x1080)) ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that this is only required in cases when using System TextRenderer IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs, only relevant for users using System TextRenderer ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for graphical output once the kernel takes over DirectGopRendering: NO Use builtin graphics output protocol renderer for console, mainly relevant for MacPro5,1 users ReconnectOnResChange: NO ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: NO Fixes High resolutions displays that display OpenCore in 1024x768, only relevant for users using System TextRenderer Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 3000 - 5000 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: NO Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Sanity check: So thanks to the efforts of Ramus, we also have an amazing tool to help verify your config for those who may have missed something: Sanity Checker Intel BIOS settings Disable: Fast Boot VT-d (can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode Post-install "},"AMD/fx.html":{"url":"AMD/fx.html","title":"Bulldozer/Jaguar","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Bulldozer(15h) and Jaguar(16h) Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide Starting Point So making a config.plist may seem hard, its not. It just takes some time but this guide will tell you how to configure eveything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore: All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default. The Sample.plist cannot be used As-Is, you must configure it to your system DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists! Now with all that, we'll need some things to get started: ProperTree: For editing our config, this editor has some super useful tools for OpenCore GenSMBIOS: For generating our SMBIOS Sample.plist: This is found under the Docs folder of the release download AMD Kernel Patches: Needed for booting macOS on AMD hardware(save these for later, we'll go over how to use them below) Bulldozer/Jaguar(15h/16h) (Supports 10.13, 10.14, and 10.15) Now with those downloaded, we can get to really get started: Grab the Sample.plist and rename to config.plist Open your new config.plist in ProperTree macOS: ProperTree.command Windows: ProperTree.bat Run the Clean Snapshot function(Cmd/Ctrl + Shift + R and point it at your EFI/OC folder), This will remove all the entries from the config.plist and then adds all your SSDTs, Kexts and Firmware drivers to the config Cmd+R is another option that will add all your files as well but will leave entries disabled if they were set like that before, useful for when you're troubleshooting And now you're ready to configure it! And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, its even required to boot. Guide on making them found here: Getting started with ACPI SSDT-EC-USBX Hides the Embedded controller and creates a fake one for macOS, needed for all Catalina users and recommended for other versions of macOS This SSDT also has a second function, USBX. This is used for forcing USB power properties and requires SSDT-EC so this just jumbles them together. I've also provided a precompiled version for users with EC0, this is the most common device on AMD systems: SSDT-EC-USBX-AMD.aml Note that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/ACPI. For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This blocks certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore Quirk: Settings relating to ACPI, leave everything here as default. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio Quirks: Settings relating to boot.efi patching and firmware fixes, one we need to change is RebuildAppleMemoryMap AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values and generally useful especially on HEDT and Xeon systems DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM, you can verify here if yours works DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectMemoryRegion: NO Needed for fixing artefacts and sleep-wake issues, generally only needed on very old firmwares ProtectSecureBoot: NO Fixes secureboot keys on MacPro5,1 and Insyde firmwares ProtectUefiServices: NO Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, Icelake and newer Coffeelake systems ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message RebuildAppleMemoryMap: YES Generates Memory Map compatible with macOS SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses, not needed on Skylake and newer SignalAppleOS: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used SyncRuntimePermissions: NO Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for Skylake and newer DeviceProperties Add: Sets device properties from a map. By default, the Sample.plist has this section set for iGPU and Audio. We have no iGPU so PCIRoot PciRoot(0x0)/Pci(0x2,0x0) can be removed from Add section. For audio we'll be setting the layout in the boot-args section, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from both Add and Block sections TL;DR, delete all the PciRoot's here as we won't be using this section. Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons(AMD CPUs don't require this) CpuidMask: Leave this blank CpuidData: Leave this blank Block: Blocks kexts from loading. Not relevant for us Patch: This is where the AMD kernel patching magic happens. Please do note that KernelToPatch and MatchOS from Clover becomes Kernel and MinKernel/ MaxKernel in OpenCore, you can find pre-made patches by AlGrey(algrey#9303): Kernel patches: Bulldozer/Jaguar(15h/16h) (10.13, 10.14, and 10.15) To merge: Open both files, Delete the Kernel -> Patch section from config.plist Copy the Kernel -> Patch section from patches.plist Paste into where old patches were in config.plist Quirks: Settings relating to the kernel, for us we'll be enabling DummyPowerManagement, PanicNoKextDump, PowerTimeoutKernelPanic and XhciPortLimit. Everything else should be left as default AppleCpuPmCfgLock: NO Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. AMD users can ignore AppleXcpmCfgLock: NO Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. AMD users can ignore AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops. To be used in tandom with PlatformInfo -> UpdateSMBIOSMode -> Custom DisableIoMapper: NO AMD doesn't have DMAR or VT-D support so irrelevant DummyPowerManagement: YES New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management. Intel can ignore ExternalDiskIcons: NO External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this. Note this shouldn't be needed on Mojave and newer LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. A more proper solution for AMD can be found here: AMD USB Mapping Misc Boot: Settings for boot screen (Leave everything as default) HibernateMode: None Best to avoid hibernation with Hackintoshes all together PickerMode: Builtin Sets OpenCore to use the builtin picker HideAuxiliary: NO Hides Recovery and other partitions unless spacebar is pressed, more closely matches real Mac behaviour HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker ConsoleAttributes: 0 Sets OpenCore's UI color, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAttributes: 0 Used for setting custom picker attributes, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAudioAssist: NO Used for enabling VoiceOver like support in the picker, unless you want your hack talking to you keep this disabled PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use OpenUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key TakeoffDelay: 0 Used to add a delay for hotkeys when OpenCore is a bit to fast to register, 5000-10000 microseconds is the prefered range for users with broken hotkeys support Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection Debug: Helpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay) AppleDebug: YES Enables boot.efi logging, useful for debuuging. Note this is only supported on 10.15.4 and newer DisableWatchDog: YES Disables the UEFI watchdog, can help with early boot issues Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory, do not skip We'll be changing AllowNvramReset, AllowSetDefault, Vault and ScanPolicy AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a security risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore Vault: Optional We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USBs with this set to default Tools Used for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you. For us, we won't be using any tools Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: OpenShell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Won't be covered here, see 8.6 of Configuration.pdf for more info NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, mainly used for UI Scaling) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) DefaultBackgroundColor: Background color used by boot.efi 00000000: Syrah Black BFBFBF00: Light Gary 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100- this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can hopefully glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. npci=0x2000 - this disables some PCI debugging related to kIOPCIConfiguratorPFM64, alternative is npci= 0x3000 which disables debugging related to kIOPCIConfiguratorTBMSIEnableand gIOPCITunnelledKey. Required for when getting stuck on PCI Start Configuration as there are IRQ conflicts relating to your PCI lanes. Not needed if Above4GDecoding is enabled. Source agdpmod=pikera - used for disabling boardID on Navi GPUs(RX 5000 series), without this you'll get a black screen. Don't use if you don't have Navi csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 03000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best security practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD, Intel and Kepler GPU users should delete this section. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX Key Type Value prev-lang:kbd String en-US:0 Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this example, we'll choose the iMacPro1,1 SMBIOS but some SMBIOS play with certain GPUs better than others: iMacPro1,1: AMD RX Polaris and Vega MacPro7,1: AMD RX Polaris, Vega and Navi(Note that MacPro7,1 is also a Catalina exclusive) MacPro6,1: AMD R5/R7/R9 and older iMac14,2: Nvidia Kepler and newer Run GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # iMacPro1,1 SMBIOS Info # ####################################################### Type: iMacPro1,1 Serial: C02YX0TZHX87 Board Serial: C029269024NJG36CB SmUUID: DEA17B2D-2F9F-4955-B266-A74C47678AD3 The order is Product | Serial | Board Serial (MLB) The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want either an invalid serial or valid serial numbers but those not in use, you want to get a message back like: \"Invalid Serial\" or \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates Platforminfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections Generic: SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case AdviseWindows: NO Used for when the EFI partition isn't first on the windows drive, generally found on systems that upgraded from Legacy to UEFI installs UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Only drivers present here should be: HfsPlus.efi ApfsDriverLoader.efi OpenRuntime.efi Audio: Related to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS AudioSupport: NO Used for enabling the audio port out, this requires AudioOut AudioDevice: [Blank] This will be the PciRoot of your audio device, gfxutil and debug log are great ways to find this AudioCodec: 0 Specify your audio codec address, can be found in either debug log or with under IOHDACodecAddress in IOService AudioOut: 0 Specifies which output is used, use the debug log to see what your board has Same idea, can be found in either debug log or with HdaCodecDump.efi MinimumVolume: 20 Default sound level for audio output PlayChime: NO Emulates the iconic Mac startup sound This also requires AXEFIAudio_VoiceOver_Boot.wav under EFI/OC/Resources/Audio VolumeAmplifier: 0 Multiplication coefficient for system volume to raw volume linear translation from 0 to 1000, see Configuration.pdf for more info on calculation Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyFiltering: NO Verifies and discards uninitialised data, mainly prevalent on 7 series Gigabyte boards KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with OpenUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Output: Relating to visual output TextRenderer: BuiltinGraphics Used for fixing resoltuion of OpenCore itself, Resolution must be set to Max to work correctly ConsoleMode: [Blank] Specifies Console output size, best to keep it blank Resolution: Max Sets OpenCore's resolution, Max will use the highest avalible reolution or can be specified (WxH@Bpp (e.g. 1920x1080@32) or WxH (e.g. 1920x1080)) ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that this is only required in cases when using System TextRenderer IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs, only relevant for users using System TextRenderer ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for graphical output once the kernel takes over DirectGopRendering: NO Use builtin graphics output protocol renderer for console, mainly relevant for MacPro5,1 users ReconnectOnResChange: NO ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: NO Fixes High resolutions displays that display OpenCore in 1024x768, only relevant for users using System TextRenderer Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 3000 - 5000 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: NO Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: AMD OS X Discord r/Hackintosh Subreddit Sanity check: So thanks to the efforts of Ramus, we also have an amazing tool to help verify your config for those who may have missed something: Sanity Checker AMD BIOS Settings Disable: Fast Boot Compatibility Support Module (CSM)(Must be off, GPU errors like gIO are common when this option in enabled) Enable: Above 4G decoding(This must be on, if you can't find the option then add npci=0x2000 to boot-args. Do not have both this option and npci enabled at the same time) EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode Post-install "},"AMD/zen.html":{"url":"AMD/zen.html","title":"Zen","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Ryzen and Threadripper(17h) Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide Starting Point So making a config.plist may seem hard, its not. It just takes some time but this guide will tell you how to configure eveything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore: All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default. The Sample.plist cannot be used As-Is, you must configure it to your system DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists! Now with all that, we'll need some things to get started: ProperTree: For editing our config, this editor has some super useful tools for OpenCore GenSMBIOS: For generating our SMBIOS Sample.plist: This is found under the Docs folder of the release download AMD Kernel Patches: Needed for booting macOS on AMD hardware(save these for later, we'll go over how to use them below) Ryzen/Threadripper(17h) (Supports 10.13, 10.14, and 10.15) Now with those downloaded, we can get to really get started: Grab the Sample.plist and rename to config.plist Open your new config.plist in ProperTree macOS: ProperTree.command Windows: ProperTree.bat Run the Clean Snapshot function(Cmd/Ctrl + Shift + R and point it at your EFI/OC folder), This will remove all the entries from the config.plist and then adds all your SSDTs, Kexts and Firmware drivers to the config Cmd+R is another option that will add all your files as well but will leave entries disabled if they were set like that before, useful for when you're troubleshooting And now you're ready to configure it! And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, its even required to boot. Guide on making them found here: Getting started with ACPI SSDT-EC-USBX Hides the Embedded controller and creates a fake one for macOS, needed for all Catalina users and recommended for other versions of macOS This SSDT also has a second function, USBX. This is used for forcing USB power properties and requires SSDT-EC so this just jumbles them together. I've also provided a precompiled version for users with EC0, this is the most common device on AMD systems: SSDT-EC-USBX-AMD.aml Note that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/ACPI. For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This blocks certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore Quirk: Settings relating to ACPI, leave everything here as default. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio Quirks: Settings relating to boot.efi patching and firmware fixes, for us we care about enabling SetupVirtualMap AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values and generally useful especially on HEDT and Xeon systems DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM, you can verify here if yours works DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectMemoryRegion: NO Needed for fixing artefacts and sleep-wake issues, generally only needed on very old firmwares ProtectSecureBoot: NO Fixes secureboot keys on MacPro5,1 and Insyde firmwares ProtectUefiServices: NO Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, Icelake and newer Coffeelake systems ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message RebuildAppleMemoryMap: YES Generates Memory Map compatible with macOS SetupVirtualMap: NO Fixes SetVirtualAddresses calls to virtual addresses, not needed on Skylake and newer. Some firmware like Gigabyte may still require it, and will kernel panic without this SignalAppleOS: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used SyncRuntimePermissions: YES Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for Skylake and newer DeviceProperties Add: Sets device properties from a map. By default, the Sample.plist has this section set for iGPU and Audio. We have no iGPU so PCIRoot PciRoot(0x0)/Pci(0x2,0x0) can be removed from Add section. For audio we'll be VoodooHDA, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from both Add and Block sections TL;DR, delete all the PciRoot's here as we won't be using this section. Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons(AMD CPUs don't require this) CpuidMask: Leave this blank CpuidData: Leave this blank Block: Blocks kexts from loading. Not relevant for us Patch: This is where the AMD kernel patching magic happens. Please do note that KernelToPatch and MatchOS from Clover becomes Kernel and MinKernel/ MaxKernel in OpenCore, you can find pre-made patches by AlGrey(algrey#9303): Kernel patches: Ryzen/Threadripper(17h) (10.13, 10.14, and 10.15) To merge: Open both files, Delete the Kernel -> Patch section from config.plist Copy the Kernel -> Patch section from patches.plist Paste into where old patches were in config.plist Quirks: Settings relating to the kernel, for us we'll be enabling DummyPowerManagement, PanicNoKextDump, PowerTimeoutKernelPanic and XhciPortLimit. Everything else should be left as default AppleCpuPmCfgLock: NO Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. AMD users can ignore AppleXcpmCfgLock: NO Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. AMD users can ignore AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops. To be used in tandom with PlatformInfo -> UpdateSMBIOSMode -> Custom DisableIoMapper: NO AMD doesn't have DMAR or VT-D support so irrelevant DummyPowerManagement: YES New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management. Intel can ignore ExternalDiskIcons: NO External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. A more proper solution for AMD can be found here: AMD USB Mapping Misc Boot: Settings for boot screen (Leave everything as default) HibernateMode: None Best to avoid hibernation with Hackintoshes all together PickerMode: Builtin Sets OpenCore to use the builtin picker HideAuxiliary: NO Hides Recovery and other partitions unless spacebar is pressed, more closely matches real Mac behaviour HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker ConsoleAttributes: 0 Sets OpenCore's UI color, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAttributes: 0 Used for setting custom picker attributes, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAudioAssist: NO Used for enabling VoiceOver like support in the picker, unless you want your hack talking to you keep this disabled PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use OpenUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key TakeoffDelay: 0 Used to add a delay for hotkeys when OpenCore is a bit to fast to register, 5000-10000 microseconds is the prefered range for users with broken hotkeys support Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection Debug: Helpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay) AppleDebug: YES Enables boot.efi logging, useful for debuuging. Note this is only supported on 10.15.4 and newer DisableWatchDog: YES Disables the UEFI watchdog, can help with early boot issues Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory, do not skip We'll be changing AllowNvramReset, AllowSetDefault, Vault and ScanPolicy AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a security risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore Vault: Optional We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USBs with this set to default Tools Used for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you. For us, we won't be using any tools Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: OpenShell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Won't be covered here, see 8.6 of Configuration.pdf for more info NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, mainly used for UI Scaling) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) DefaultBackgroundColor: Background color used by boot.efi 00000000: Syrah Black BFBFBF00: Light Gary 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100- this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can hopefully glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. npci=0x2000 - this disables some PCI debugging related to kIOPCIConfiguratorPFM64, alternative is npci= 0x3000 which disables debugging related to gIOPCITunnelledKey. Required for when getting stuck on PCI Start Configuration as there are IRQ conflicts relating to your PCI lanes. Not needed if Above4GDecoding is enabled agdpmod=pikera - used for disabling boardID on Navi GPUs(RX 5000 series), without this you'll get a black screen. Don't use if you don't have Navi alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 03000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best security practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD, Intel and Kepler GPU users should delete this section. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX Key Type Value prev-lang:kbd String en-US:0 Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this example, we'll choose the iMacPro1,1 SMBIOS but some SMBIOS play with certain GPUs better than others: iMacPro1,1: AMD RX Polaris and newer MacPro7,1: AMD RX Polaris and newer(Note that MacPro7,1 is also a Catalina exclusive) MacPro6,1: AMD R5/R7/R9 and older iMac14,2: Nvidia Kepler and newer Run GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # iMacPro1,1 SMBIOS Info # ####################################################### Type: iMacPro1,1 Serial: C02YX0TZHX87 Board Serial: C029269024NJG36CB SmUUID: DEA17B2D-2F9F-4955-B266-A74C47678AD3 The order is Product | Serial | Board Serial (MLB) The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want either an invalid serial or valid serial numbers but those not in use, you want to get a message back like: \"Invalid Serial\" or \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates Platforminfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections Generic: SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case AdviseWindows: NO Used for when the EFI partition isn't first on the windows drive, generally found on systems that upgraded from Legacy to UEFI installs UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Only drivers present here should be: HfsPlus.efi ApfsDriverLoader.efi OpenRuntime.efi Audio: Related to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS AudioSupport: NO Used for enabling the audio port out, this requires AudioOut AudioDevice: [Blank] This will be the PciRoot of your audio device, gfxutil and debug log are great ways to find this AudioCodec: 0 Specify your audio codec address, can be found in either debug log or with under IOHDACodecAddress in IOService AudioOut: 0 Specifies which output is used, use the debug log to see what your board has Same idea, can be found in either debug log or with HdaCodecDump.efi MinimumVolume: 20 Default sound level for audio output PlayChime: NO Emulates the iconic Mac startup sound This also requires AXEFIAudio_VoiceOver_Boot.wav under EFI/OC/Resources/Audio VolumeAmplifier: 0 Multiplication coefficient for system volume to raw volume linear translation from 0 to 1000, see Configuration.pdf for more info on calculation Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyFiltering: NO Verifies and discards uninitialised data, mainly prevalent on 7 series Gigabyte boards KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with OpenUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Output: Relating to visual output TextRenderer: BuiltinGraphics Used for fixing resoltuion of OpenCore itself, Resolution must be set to Max to work correctly ConsoleMode: [Blank] Specifies Console output size, best to keep it blank Resolution: Max Sets OpenCore's resolution, Max will use the highest avalible reolution or can be specified (WxH@Bpp (e.g. 1920x1080@32) or WxH (e.g. 1920x1080)) ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that this is only required in cases when using System TextRenderer IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs, only relevant for users using System TextRenderer ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for graphical output once the kernel takes over DirectGopRendering: NO Use builtin graphics output protocol renderer for console, mainly relevant for MacPro5,1 users ReconnectOnResChange: NO ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: NO Fixes High resolutions displays that display OpenCore in 1024x768, only relevant for users using System TextRenderer Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 3000 - 5000 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: NO Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: AMD OS X Discord r/Hackintosh Subreddit Sanity check: So thanks to the efforts of Ramus, we also have an amazing tool to help verify your config for those who may have missed something: Sanity Checker AMD BIOS Settings Disable: Fast Boot Compatibility Support Module (CSM)(Must be off, GPU errors like gIO are common when this option in enabled) Enable: Above 4G decoding(This must be on, if you can't find the option then add npci=0x2000 to boot-args. Do not have both this option and npci enabled at the same time) EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode Post-install "},"post-install/":{"url":"post-install/","title":"Post-Install","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Post Install Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide So you've finally finsihed installing macOS with OpenCore but know there's still some things to clean up, well you've come to the right place! Universal This section is benificial for all, regardless of hardware. Correcting Audio Enabling FileVault and other security features Booting macOS without a USB Updating OpenCore, kexts and macOS Disabling OpenCore Logging Fixing iServices Fixing DRM Intel Used for Intel's consumer line Fixing Intel USB Fixing CFG Lock For sandy and Ivy Bridge: Fixing Power Management Intel HEDT Used for Intel's High End and Server line Fixing Intel USB Emulating NVRAM For Sandy and Ivy Bridge E: Fixing Power Management AMD Used for AMD CPU based hardware Fixing AMD USB Fixing AMD Temperature readings "},"post-install/security.html":{"url":"post-install/security.html","title":"Security and FileVault","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Security and FileVault Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide So something that makes OpenCore truly special is how it's been built with security in mind which is quite rare especially in the Hackintosh community. Well here we'll be going through and setting up some of OpenCore's great Security features: FileVault Vault ScanPolicy FileVault FileVault is macOS's builtin drive encyption, and with OpenCore support for it has been drastcally improved compared to the legacy Clover drivers. To start, you'll need the following .efi drivers: OpenRuntime.efi OpenUsbKbDxe.efi for DuetPkg users(systems without UEFI support) Do not use VirtualSMC.efi with OpenCore, its already baked inside. You do however require VirtualSMC.kext still Setting in your config.plist: Misc -> Boot PollAppleHotKeys set to YES(While not needed can be helpfu) Misc -> Security AuthRestart set to YES(Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a security risk so optional) NVRAM -> Add -> 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 UIScale set to 02 for high resolution small displays UEFI -> Input KeySupport set to YES(Only when using OpenCore's builtin input, users of OpenUsbKbDxe should avoid) UEFI -> Output ProvideConsoleGOP to YES UEFI -> Protocols FirmwareVolume set to YES HashServices set to YES for Broadwell and older(this includes X99), this is needed for systems with broken SHA-1 hashing AppleSmcIo set to YES(this replaces VirtualSMC.efi) UEFI -> Quirks RequestBootVarRouting set to YES ExitBootServicesDelay set to 3000-5000 if you recieve Still waiting for root device on Aptio IV firmwares(Broadwell and older) With all this, you can proceed to enable FileVault like on a normal mac under System Preferences -> Security & Privacy -> FileVault For UI issues, see Fixing Resolution and Verbose Vault What is vaulting? Well vaulting is based around 2 things, vault.plist and vault.sig: vault.plist: a \"snapshot\" of your EFI vault.sig: validation of vault.plist This can be seen as secure boot for OpenCore, so no one can modify it and get in without your permission. The specifics of vaulting is that a 256 byte RSA-2048 signature of vault.plist will be shoved into our OpenCore.efi. This key can either be shoved into OpenCoreVault.c before compiling or with sign.command if you already have OpenCore.efi compiled. Do note that nvram.plist won't be vaulted so users with emulated NVRAM still have risk of someone adding/removing certain NVRAM variables Settings in your config.plist: Misc -> Security -> Vault: Basic: Requires just vault.plist to be present, mainly used for filesystem integrity verification Secure: Requires both vault.plist and vault.sig, used for best security as vault.plist changes require a new signature Booter -> ProtectSecureBoot: YES Needed with Insyde firmwares for fixing secureboot keys and reporting violations Setting up vault: Grab OpenCorePkg and open the CreateVault folder, inside we'll find the following: create_vault.sh RsaTool sign.command The last one is what we care about: sign.command So when we run this command, it'll look for the EFI folder located beside our Utilities folder, so we want to bring either our personal EFI into the OpenCorePkg folder or bring Utilities into our EFI folder: Now we're ready to run sign.command: Disabling Vault after setup: If you're doing heavy troublehooting or have the need to disable Vault, the main things to change: Grab a new copy of OpenCore.efi Misc -> Security -> Vault set to Optional ScanPolicy What this quirk allows to prevent scanning and booting from untrusted sources. Setting to 0 will allow all sources present to be bootable but calculating a specific ScanPolicy value will allow you a greater range of flexibilty and security. To calculate the ScanPolicy value, you simply add up all the hexidecimal values(with a hexideciaml calculator, you can access this from the built-in macOS caluclator app with ⌘+3). Once it's all added up, you would add this hexidecimal value to ScanPolicy(you will need to convert it to a decimal value first, Xcode will automatically convert it when you paste it) 0x00000001 (bit 0) — OC_SCAN_FILE_SYSTEM_LOCK restricts scanning to only known file systems defined as a part of this policy. File system drivers may not be aware of this policy, and to avoid mounting of undesired file systems it is best not to load its driver. This bit does not affect dmg mounting, which may have any file system. Known file systems are prefixed with OCSCAN_ALLOW_FS. 0x00000002 (bit 1) — OC_SCAN_DEVICE_LOCK restricts scanning to only known device types defined as a part of this policy. This is not always possible to detect protocol tunneling, so be aware that on some systems it may be possible for e.g. USB HDDs to be recognised as SATA. Cases like this must be reported. Known device types are prefixed with OCSCAN_ALLOW_DEVICE. 0x00000100 (bit 8) — OC_SCAN_ALLOW_FS_APFS allows scanning of APFS file system. 0x00000200 (bit 9) — OC_SCAN_ALLOW_FS_HFS allows scanning of HFS file system. 0x00000400 (bit 10) — OC_SCAN_ALLOW_FS_ESP allows scanning of EFI System Partition file system. 0x00010000 (bit 16) — OC_SCAN_ALLOW_DEVICE_SATA allow scanning SATA devices. 0x00020000 (bit 17) — OC_SCAN_ALLOW_DEVICE_SASEX allow scanning SAS and Mac NVMe devices. 0x00040000 (bit 18) — OC_SCAN_ALLOW_DEVICE_SCSI allow scanning SCSI devices. 0x00080000 (bit 19) — OC_SCAN_ALLOW_DEVICE_NVME allow scanning NVMe devices. 0x00100000 (bit 20) — OC_SCAN_ALLOW_DEVICE_ATAPI allow scanning CD/DVD devices. 0x00200000 (bit 21) — OC_SCAN_ALLOW_DEVICE_USB allow scanning USB devices. 0x00400000 (bit 22) - OC_SCAN_ALLOW_DEVICE_FIREWIRE allow scanning FireWire devices. 0x00800000 (bit 23) — OC_SCAN_ALLOW_DEVICE_SDCARD allow scanning card reader devices. By default, ScanPolicy is given a value of 0xF0103(983,299) which is the combination of the following: OC_SCAN_FILE_SYSTEM_LOCK OC_SCAN_DEVICE_LOCK OC_SCAN_ALLOW_FS_APFS OC_SCAN_ALLOW_DEVICE_SATA OC_SCAN_ALLOW_DEVICE_SASEX OC_SCAN_ALLOW_DEVICE_SCSI OC_SCAN_ALLOW_DEVICE_NVME And lets just say for this example that you want to add OC_SCAN_ALLOW_DEVICE_USB: 0x00200000 + 0xF0103 = 0x2F0103 And converting this to decimal gives us 3,080,451 "},"post-install/audio.html":{"url":"post-install/audio.html","title":"Fixing Audio","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Fixing audio with AppleALC Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide So to start, we'll assume you already have Lilu and AppleALC installed, if you're unsure if it's been loaded correctly you can run the following in terminal(This will also check if AppleHDA is loaded, as without this AppleALC has nothing to patch): kextstat | grep -E \"AppleHDA|AppleALC|Lilu\" If all 3 show up, you're good to go. And make sure VoodooHDA is not present. This will conflict with AppleALC otherwise Finding your layout ID So for this example, we'll assume your codec is ALC1220. To verify yours, you have a couple options: Checking motherboard's spec page and manual Check DeviceManager in Windows Run cat in terminal on Linux cat /proc/asound/card0/codec#0 | less Now with a codec, we'll want to cross reference it with AppleALC's supported codec list: AppleALC Supported Codecs With the ALC1220, we get the following: 0x100003, layout 1, 2, 3, 5, 7, 11, 13, 15, 16, 21, 27, 28, 29, 34 So from this it tells us 2 things: Which hardware revision is supported(0x100003), only relevant when multiple revisions are listed with different layouts Various layout IDs supported by our codec(layout 1, 2, 3, 5, 7, 11, 13, 15, 16, 21, 27, 28, 29, 34) Now with a list of supported layout IDs, we're ready to try some out Testing your layout To test out our layout IDs, we're going to be using the boot-arg alcid=xxx where xxx is your layout. Remember that to try layout IDs one at a time. Do not add multiple IDs or alcid boot-args, if one doesn't work then try the next ID and etc NVRAM ├── Add ├── 7C436110-AB2A-4BBB-A880-FE41995C9F82 ├── bootargs | String | alcid=11 Making Layout ID more permanent Once you've found a Layout ID that works with your hack, we can create a more permanant solution for closer to how real macs set their Layout ID. With AppleALC, there's a priority hiarchy with which properties are prioritized: alcid=xxx boot-arg, useful for debugging and overrides all other values alc-layout-id in DeviceProperties, recommended for AppleALC layout-id in DeviceProperties, same property Macs use As we can see in AppeALC's source, it expects your layout ID to be set via alc-layout-id so to make things easier on AppleALC we'll set it with DeviceProperties To start, we'll need to find out where our Audio controller is located on the PCI map. For this, we'll be using a handy tool called gfxutil then with the macOS terminal: path/to/gfxutil -f HDEF Then add this PciRoot with the child alc-layout-id to your config.plist under DeviceProperties -> Add: Note that the value is in HEX/Data, you can use a simple decimal to hexidecimal calculator to find yours. printf '%x\\n' DECI_VAL: So in this example, alcid=11 would become alc-layout-id | Data | Miscellaneous issues No Mic on AMD: This is a common issue with when running AppleALC with AMD, specifcally no patches have been made to support Mic input. At the moment the \"best\" solution is to either buy a USB DAC/Mic or go the VoodooHDA.kext method. Problem with VoodooHDA is that it's been known to be unstable and have worse audio quality than AppleALC Same layout ID from Clover doesn't work on OpenCore This is likely do to IRQ conflicts, on Clover there's a whole sweep of ACPI hotpatches that are applied automagically. Fixing this is a little bit painful but SSDTTime's FixHPET option can handle most cases. For odd cases where RTC and HPET take IRQs from other devices like USB and audio, you can reference the HP Compaq DC7900 ACPI patch example in the trashOS repo "},"post-install/oc2hdd.html":{"url":"post-install/oc2hdd.html","title":"Booting without USB","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Moving OpenCore from USB to macOS Drive Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide Grabbing OpenCore off the USB So to start, we'll first want to grab OpenCore off of our installer. To do this, we'll be using a neat tool from CorpNewt called MountEFI For this example, we'll assume your USB is called Install macOS Catalina: Once the EFI's mounted, we'll want to grab our EFI folder on there and keep in a safe place. We'll then want to eject the USB drive's EFI as having multiple EFIs mounted can confuse macOS sometimes, best practice is to keep only 1 EFI mounted at a time(you can eject just the EFI, the drive itself doesn't need to be removed) Now with this done, lets mount our macOS drive. With macOS Catalina, macOS is actually partitioned into 2 volumes: System Partition and User Partition. This means that MountEFI may report multiple drives in it's picker but each partition will still share the same EFI(The UEFI spec only allows for 1 EFI per drive). You can tell if it's the same drive with diskXsY (Y is just to say what parition it is) When you mount your main drive's EFI, you may be greeted with a folder called APPLE, this is used for updating the firmware on real Macs but has no effect on our hardware. You can wipe everything on the EFI partition and replace it with the one found on your USB Special notes for legacy users When transfering over your EFI, there are still boot sectors that need to be written to so your non-UEFI BIOS would be able to find it So don't forget to rerun the BootInstall.command on your macOS drive "},"post-install/update.html":{"url":"post-install/update.html","title":"Updating OpenCore, kexts and macOS","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Updating OpenCore and macOS Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide Updating OpenCore So the main things to note with updating OpenCore: Releases happen the first monday of every month The Differences.pdf will tell you all the things added and removed from this version of OpenCore compared to the previous release The OpenCore Vanilla Guide will have a note on the README.md about what release version it supports So how do I update? So the process goes as follows: Download the latest releases of OpenCore and co. OpenCorePkg AppleSupportPkg Mount your EFI So first, lets mount your hard drive's EFI and make a copy somewhere safe with MountEFI. We won't be updating the drive's EFI at first, instead we'll be grabbing a spare USB to be our crash dummy. This allows us to keep a working copy of Opencore incase our update goes south For the USB, it must be formatted as GUID. Reason for this is that GUID will autmatically create an EFI partition, though this will be hidden by default so you'll need to mount it with MountEFI. Now you can place your OpenCore EFI on the USB Replace the OpenCore files with the ones you just downloaded The important ones to update: EFI/BOOT/BOOTx64.efi EFI/OC/OpenCore.efi EFI/OC/Drivers/OpenRuntime(Don't forget this one, OpenCore will not boot with mismatched versions) You can also update other drivers you have if present, these are just the ones that must be updated in order to boot correctly Compare your config.plist to that of the new Sample.plist With this, there's a couple ways to do this: OCConfigCompare to compare between the sample.plist and your config.plist diff (file input 1) (file input 2) in terminal BeyondCompare Make a new config based off reading the updated Opencore Vanilla Guide Once you've made the adjustments and made sure you config is compliant with the newest release of OpenCore, make sure to double check your setting with the OpenCore Guide on what to set everything to, otherwise read the Differences.pdf if you want to get a bit more technical. Boot! Once everything's working with the dummy USB, you can mount the EFI and move it over to the hard drive's EFI partition. Remember to keep a copy of your old EFI in cases where OpenCore is acting funny down the road Updating Kexts Updating Kexts is a similar process to updating OpenCore, make a copy of everything and update on a dummy USB in case there's issues The easiest way to update your kexts is via 2 tools: Lilu and Friends to download and compile the kexts Kext Extractor to merge them into your EFI Updating macOS So this is probably one of the most challenging parts about a hackintosh, maintaining it through OS updates. The main things to keep in mind: With OS updates, make sure everything has been updated and you have some form of recovery like TimeMachine or an older macOS installer with a known good EFI on it Do a bit of google-fu to see if others are having issues with the newest update I've also provided a bit more of a detailed map of what's changed in macOS versions, see below: macOS Catalina 10.15.0 Requires proper EC Dual socket and most AMD CPUs need AppleMCEReporterDisabler.kext MacPro5,1 support has been dropped 10.15.1 Requires WhateverGreen 1.3.4+ Broke DRM for many GPUs(see DRM Chart) Requires all previous fixes 10.15.2 Fixes Navi support in the installer Requires all previous fixes 10.15.3 No change Requires all previous fixes 10.15.4 AMD CPU users need to update cpuid_set_cpufamily patch Fixes DRM on many Ellesmere based Polaris GPUs Requires all previous fixes(excluding shikigva=80 for Polaris DRM for most users) "},"extras/msr-lock.html":{"url":"extras/msr-lock.html","title":"Fixing CFG Lock","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Fixing CFG Lock Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide Do note that this is only recommended for users who have already installed macOS, for users who are ibnstalling for the first time enable AppleCpuPmCfgLock and AppleXcpmCfgLock under Kernel -> Quirks Disabling CFG Lock So you've installed macOS but you're using those pesky CFG-Lock patches that we want to get rid of, well to do this is fairly simple. You'll need the following: Inside your EFI/OC/Tools folder and config.plist: VerifyMsrE2 Modifed GRUB Shell And some apps to help us out: UEFITool (Make sure it's UEFITool and not UEFIExtrac) Universal-IFR-Extractor And don't forget to disable the following from your config.plist under Kernel -> Quirks: AppleCpuPmCfgLock AppleXcpmCfgLock And the final part, grabbing your BIOS from the vendors' website. Now the fun part! Checking if CFG-Lock can be turned off Boot OpenCore and select the VerifyMsrE2 option in the picker. This tool will tell you whether your BIOS supports CFG-Lock and if it can be unlocked. Turning off CFG-Lock manually Open your firmware with UEFITool and then find CFG Lock as a Unicode string. If nothing pops up then your firmware doesn't support CFG Lock, otherwise continue on. You'll find that this string is found within a Setup folder, right-click and export as Setup.bin Open your setup file with ifrextract and export as a .txt file with terminal: path/to/ifrextract path/to/Setup.bin path/to/Setup.txt Open the text file and search for CFG Lock, VarStoreInfo (VarOffset/VarName): and note the offset right after it(ie: 0x5A4) Run the Modified GRUB Shell and paste the following where 0x5A4 is replaced with your value: setup_var 0x5A4 0x00 Do note that variable offsets are unique not just to each motherboard but even to its firmware version. Never try to use an offset without checking. And you're done! Now you'll have correct CPU power management Note: Every time you reset your BIOS you will need to flip this bit again, make sure to write it down with the BIOS version so you know which. "},"post-install/verbose.html":{"url":"post-install/verbose.html","title":"Fixing Resolution and Verbose","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Fixing Resolution and Verbose Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide Wanting a more clean booting experience with macOS without all that verbose text while booting? Well you need a couple things: Recommended Configuration: NVRAM -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> boot-args: Remove -v from your config.plist NVRAM -> 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 -> UIScale: 01: Standard resolution 02: HiDPI (generally required for FileVault to function correctly on smaller displays) UEFI -> Output: TextRenderer set toBuiltinGraphics Resolution: set to Max for best results Optionally can specify resolution: WxH@Bpp (e.g. 1920x1080@32) or WxH (e.g. 1920x1080) ProvideConsoleGop set to True If still having issues, see Configuration.pdf for all possible options. "},"post-install/drm.html":{"url":"post-install/drm.html","title":"Fixing DRM","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Fixing DRM support and iGPU performance So with DRM, we have a couple things we need to mention: DRM requires a supported dGPU See the GPU Buyers Guide for supported cards DRM is broken for iGPU-only systems These have never worked with Haswell and newer For Ivy Bridge, this could be fixed with Shiki (now WhateverGreen) til 10.12.2, but broke with 10.12.3 Working hardware acceleration and decoding Testing Hardware Acceleration and Decoding So before we can get started with fixing DRM, we need to make sure your hardware is working. The best way to check is by running VDADecoderChecker: If you fail at this point, there's a couple things you can check for: Make sure your hardware is supported See GPU Buyers Guide Make sure the SMBIOS you're running matches with your hardware Don't use a Mac Mini SMBIOS on a desktop for example, as Mac Minis run mobile hardware and so macOS will expect the same Make sure the iGPU is enabled in the BIOS and has the correct properties for your setup (AAPL,ig-platform-id and if needed, device-id) You can either review the DeviceProperties section from the guide or WhateverGreen's manual Avoid unnessary ACPI renames, all important ones are handled in WhateverGreen change GFX0 to IGPU change PEG0 to GFX0 change HECI to IMEI etc Make sure Lilu and WhateverGreen are loaded Make sure not to have any legacy graphics patches present as they've been absorbed into WhateverGreen: IntelGraphicsFixup.kext NvidiaGraphicsFixup.kext *Shiki.kext To check if Lilu and WhateverGreen loaded correctly: kextstat | grep -E \"Lilu|WhateverGreen\" Testing DRM So before we get too deep, we need to go over some things, mainly the types of DRM you'll see out in the wild: FairPlay 1.x: Software based DRM, used for supporting legacy Macs more easily Easiest way to test this is by playing an iTunes movie: FairPlay 1.x test FairPlay 1.x trailers will work on any configuration if WhateverGreen is properly set up - including iGPU-only configurations. However, FairPlay 1.x movies will only play on iGPU-only configurations for around 3-5 seconds, erroring that HDCP is unsupported afterwards. FairPlay 2.x/3.x: Hardware based DRM, found in Netflix, Amazon Prime There's a couple ways to test: Play a show in Netflix or Amazon Prime Play an Amazon Prime trailer: Spider-Man: Far From Home Trailer itself does not use DRM but Amazon still checks before playing Note: Requires newer AMD GPU to work (Polaris+) FairPlay 4.x: Mixed DRM, found on AppleTV+ You can open TV.app, choose TV+ -> Free Apple TV+ Premieres, then click on any episode to test without any trial (you do need an iCloud account) Apple TV+ also has a free trial if you want to use it Note: Requires either an absent iGPU (Xeon) or newer AMD GPU to work (Polaris+) Possible to force FairPlay 1.x when iGPU is absent If everything works on these tests, you have no need to continue! Otherwise, proceed on. Fixing DRM So for fixing DRM on hackintoshes we can go down mainly 1 route: patching DRM to use either software or AMD decoding. Vit made a great little chart for different hardware configurations: WhateverGreen's DRM chart So how do you use it? First, identify what configuration you have in the chart (AMD represents GPU, not CPU). The SMBIOS listed (IM = iMac, MM = Mac Mini, IMP = iMac Pro, MP = Mac Pro) is what you should use if you match the hardware configuration. If you don't match any of the configurations in the chart, you're out of luck. Next, identify what Shiki mode you need to use. If there are two configurations for your setup, they will differ in the Shiki flags used. Generally, you want hardware decoding over software decoding. If the mode column is blank, then you are done. Otherwise, you should add shikigva as a property to any GPU, using DevicesProperties > Add. For example, if the mode we need to use is shikigva=80: You can also use the boot argument - this is in the mode column. Here's one example. If we have an Intel i9-9900K and an RX 560, the configuration would be \"AMD+IGPU\", and we should be using an iMac or Mac Mini SMBIOS (for this specific configuration, iMac19,1). Then we see there are two options for the configuration: one where the mode is shikigva=16, and one with shikigva=80. We see the difference is in \"Prime Trailers\" and \"Prime/Netflix\". We want Netflix to work, so we'll choose the shikigva=80 option. Then inject shikigva with type number/integer and value 80 into our iGPU or dGPU, reboot, and DRM should work. Here's another example. This time, We have an Ryzen 3700X and an RX 480. Our configuration in this case is just \"AMD\", and we should be using either an iMac Pro or Mac Pro SMBIOS. Again, there are two options: no shiki arguments, and shikigva=128. We prefer hardware decoding over software decoding, so we'll choose the shikigva=128 option, and again inject shikigva into our dGPU, this time with value 128. A reboot and DRM works. Notes: You can use gfxutil to find the path to your iGPU/dGPU. path/to/gfxutil -f GFX0 GFX0: For dGPUs, if multiple installed check IORegistryExplorer for what your AMD card is called IGPU: For iGPU If you inject shikigva using DeviceProperties, ensure you only do so to one GPU, otherwise WhateverGreen will use whatever it finds first and it is not guaranteed to be consistent. IQSV stands for Intel Quick Sync Video: this only works if iGPU is present and enabled and it is set up correctly. Special configurations (like Haswell + AMD dGPU with an iMac SMBIOS, but iGPU is disabled) are not covered in the chart. You must do research on this yourself. Shiki source is useful in understanding what flags do what and when they should be used, and may help with special configurations. Fixing iGPU performance So how do we fix iGPU performance on a hackintosh? Well by loading Apple's GuC (Graphics Micro Code). The main thing to note is that firmware loading is restricted to: Skylake and newer CPU with a supported iGPU And a recent chipset, 300-series or newer: Z390, B360, H370, H310, etc. (not Z370, as it is actually 200-series) Do note that even with recent chipsets, firmware loading is not guaranteed to work. If you experience a kernel panic or lots of graphics errors after trying this, it is probably because firmware loading is not supported on your setup. So how do we apply it? Under DeviceProperties -> Add -> PciRoot(0x0)/Pci(0x2,0x0), add: igfxfw | Data | To enable firmware loading. The best way to check is to monitor the iGPU's frequency is with either Intel Power Gadget or checking the boot logs for Apple Scheduler references. Make sure you have the igfxfw property applied: kernel: (AppleIntelCFLGraphics) [IGPU] Graphics Firmware Version: 2.14.0.0 kernel: (AppleIntelCFLGraphics) [IGPU] Graphics Firmware Version: 2.14.0.0 kernel: (AppleIntelCFLGraphics) [IGPU] Graphics accelerator is using scheduler: Apple Firmware kernel: (AppleIntelCFLGraphics) [IGPU] Graphics accelerator is using scheduler: Apple Firmware "},"post-install/iservices.html":{"url":"post-install/iservices.html","title":"Fixing iServices","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Fixing iMessage and other services with OpenCore Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide This page is for those having iMessage and other iServices issues, this is a very basic guide so will not go as in-depth into the issues as some other guides. This specific guide is a translation and reinterpretation of the AppleLife Guide on fixing iService: Как завести сервисы Apple - iMessage, FaceTime, iCloud Generate a new Serial Download GenSMBIOS and select option 1 to download MacSerial and next option 3 to generate some new serials. What we're looking for is a valid serial that currently has no registered purchase date. Tip: iMacPro1,1 10 will print 10 serials, this will save you some time on generating Now enter the serial into the Apple Check Coverage page, you will get 1 of 3 responses: \"We’re sorry, but this serial number isn’t valid. Please check your information and try again.\": Valid Purchase date: Purchase Date not Validated: This last one is what we're after, as we want something genuine but currently not in use by anyone. Now we can translate the rest of the values into our config.plist -> PlatformInfo -> Add: Type = SystemProductName Serial = SystemSerialNumber Board Serial = MLB SmUUID = SystemUUID Fixing En0 To start, grab Hackintool (Github link) and head to System -> Peripherals (Info -> Misc on older versions of Hackintool) Here under Network Interfaces (network card icon), look for en0 under BSD and check whether the device has a checkmark under Builtin. If there is a checkmark, skip to Fixing ROM section otherwise continue reading. What if I don't have En0 at all?!? Well, we'll want to reset macOS so it can build the interfaces fresh, open terminal and run the following: sudo rm /Library/Preferences/SystemConfiguration/NetworkInterfaces.plist sudo rm /Library/Preferences/SystemConfiguration/preferences.plist Once done reboot and check again. If this doesn't work, add NullEthernet.kext and ssdt-rmne.aml to your EFI and config.plist under Kernel -> Add and ACPI -> Add respectively. The SSDT is precompiled so no extra work needed, reminder compiled files have a .aml extension and .dsl can be seen as source code. Now head under the PCI tab of Hackintool and export your PCI DeviceProperties, this will create a pcidevices.plist on your desktop Now search through the pcidevices.plist and find the PCIRoot of your ethernet controller. For us, this would be PciRoot(0x0)/Pci(0x1f,0x6) Now with the PCIRoot, go into your config.plist -> DeviceProperties -> Add and apply the property of built-in with type Data and value 01 Fixing ROM This is a section many may have forgotten about but this is found in your config.plist under PlatformInfo -> generic -> ROM To find your actual MAC Address/ROM value, you can find in a couple places: BIOS macOS: System Preferences -> Network -> Ethernet -> Advanced -> MAC Address Windows: Settings -> Network & Internet -> Ethernet -> Ethernet -> Phyisical MAC Address Some users have even gone as far as using real Apple MAC Address dumps for their config, for this guide we'll be using our real MAC Address but note that this is another option When adding this to your config, c0:7e:bf:c3:af:ff should be converted to c07ebfc3afff as the Data type cannot accept colons(:). Verifying NVRAM Something that many forget about iServices is that NVRAM is crucial to getting it working correctly, the reason being is that iMessage keys and such are stored in NVRAM. Without NVRAM, iMessage can neither see nor store keys. So we'll need to verify NVRAM works, regardless if \"it should work\" as some firmwares can be more of a pain than others. Please refer to the Emulated NVRAM section of the OpenCore Guide for both testing if you have working NVRAM and emulating it if you dont. Clean out old attempts This is important for those who've tried setting up iMessage but failed, to start make sure your NVRAM has been cleared. You can enable the option in the boot picker in your config under config.plist -> Misc -> Security -> AllowNvramReset. Next open terminal and run the following: sudo rm -rf ~/Library/Caches/com.apple.iCloudHelper* \\ ~/Library/Caches/com.apple.Messages* \\ ~/Library/Caches/com.apple.imfoundation.IMRemoteURLConnectionAgent* \\ ~/Library/Preferences/com.apple.iChat* \\ ~/Library/Preferences/com.apple.icloud* \\ ~/Library/Preferences/com.apple.imagent* \\ ~/Library/Preferences/com.apple.imessage* \\ ~/Library/Preferences/com.apple.imservice* \\ ~/Library/Preferences/com.apple.ids.service* \\ ~/Library/Preferences/com.apple.madrid.plist* \\ ~/Library/Preferences/com.apple.imessage.bag.plist* \\ ~/Library/Preferences/com.apple.identityserviced* \\ ~/Library/Preferences/com.apple.ids.service* \\ ~/Library/Preferences/com.apple.security* \\ ~/Library/Messages Verifying your work one last time Grab macserial and run the following: path/to/macserial -s This will provide us with a full rundown of our system, verify that what is presented matches up with your work. Cleaning up your AppleID Remove all devices from your AppleID: Manage your devices Enable 2 Factor-Auth Remove all iServices from Keychain, some examples:ids: identity-rsa-key-pair-signature-v1 ids: identity-rsa-private-key ids: identity-rsa-public-key ids: message-protection-key ids: message-protection-public-data-registered ids: personal-public-key-cache iMessage Encryption Key iMessage Signing Key com.apple.facetime: registrationV1 etc ... And a final layer of precaution is to make a new AppleID to play with, this makes sure that if you do end up blacklisting your account that it's not your main. An extra tip is adding a payment card to the account, some users found this also helped with iMessage activation. Customer Code error Welp mate, you've done it. You blackmailed your AppleID. The fix is simple but not pretty, you MUST call Apple. Otherwise, there is no proceeding besides using a new account. Adding a payment card before calling can help legitimise the account so it doesn't seem as much like a bot. "},"post-install/nvram.html":{"url":"post-install/nvram.html","title":"Emulated NVRAM","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Emulated NVRAM Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide So this section is for those who don't have native NVRAM, the most common hardware to have incompatible native NVRAM with macOS are X99 and some X299 series chipsets: X99 X299 For B360, B365, H310, H370, Z390 users, make sure you have SSDT-PMC both under EFI/OC/ACPI and config.plist -> ACPI -> Add. For more info on making and compiling SSDTs, please see Getting started with ACPI Cleaning out the Clover gunk So some may not have noticed but Clover may have installed RC scripts into macOS for proper NVRAM emulation. This is an issue as it conflicts with OpenCore's method of emulation. Files to delete: /Volumes/EFI/EFI/CLOVER/drivers64UEFI/EmuVariableUefi-64.efi /Volumes/EFI/nvram.plist /etc/rc.clover.lib /etc/rc.boot.d/10.save_and_rotate_boot_log.local /etc/rc.boot.d/20.mount_ESP.local /etc/rc.boot.d/70.disable_sleep_proxy_client.local.disabled /etc/rc.shutdown.d/80.save_nvram_plist.local​ If folders are empty then delete them as well: /etc/rc.boot.d /etc/rc.shutdown.d​ Verifying if you have working NVRAM To start, open the terminal and run the following one line at a time: sudo -s sudo nvram -c sudo nvram myvar=test exit Now reboot and run this: nvram -p | grep -i myvar If nothing returns then your NVRAM is not working. If a line containing myvar test returns, your NVRAM is working. Note: nvram -c requires SIP to be off, an alternative is to wipe NVRAM at the boot menu. Reminder you'll need Misc -> Security -> AllowNvramReset -> YES Enabling emulated NVRAM (with a nvram.plist) To enable emulated NVRAM, you'll need 3 things set: Within your config.plist: Booter: DisableVariableWrite: set to YES Misc -> Security: ExposeSensitiveData: set to 0x3 NVRAM: LegacyEnable: set to YES LegacyOverwrite set to YES LegacySchema: NVRAM variables set(OpenCore compares these to the variables present in nvram.plist) WriteFlash: set to NO And within your EFI: OpenRuntime.efi driver(this is needed for proper sleep, shutdown and other services to work correctly Now grab the 'LogoutHook.command' and place it somewhere safe (e.g. within your user directory, as shown below): /Users/(your username)/LogoutHook/LogoutHook.command Open up terminal and run the following: sudo defaults write com.apple.loginwindow LogoutHook /Users/(your username)/LogoutHook/LogoutHook.command And voila! You have emulated NVRAM! Do keep in mind this requires the nvram command to support the -x flag for this to work correctly which is unavailable on macOS 10.12 and below. If you are installing macOS 10.12 or earlier, you need to copy nvram.mojave into the same folder as LogoutHook.command, which fixes this by invoking it instead of the system nvram command. Something else to note is that macOS is only able to read nvram.plist but it won't be able to write to nvram.plist unless running the shutdown process. This means running the test above won't work "},"troubleshooting/troubleshooting.html":{"url":"troubleshooting/troubleshooting.html","title":"General Troubleshooting","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) General Troubleshooting Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide This section is for those having issues booting either OpenCore, macOS or having issues inside macOS. This page is devided up into a couple sections: OpenCore booting issues This is anytime before or during the loading of the macOS kernel macOS booting issues Anytime between the kernel loading and installing macOS macOS post-install issues Anytime after macOS is installed Other issues This includes troubleshooting tools used for making your USB, fixing cosmetics in OpenCore, etc While still a work in progress, laptop users wanting to convert an existing Clover install can see the Clover to OpenCore conversion for more info And if your issue is not covered, please read the offical OpenCore documentation: Configuration.pdf OpenCore booting Stuck on no vault provided! Stuck on EndRandomSeed Can't see macOS partitions Black screen after picker Stuck on OC: OcAppleGenericInput... - Success Stuck on OCB: OcScanForBootEntries failure - Not Found Stuck on OCB: failed to match a default boot option Stuck on OCABC: Memory pool allocation failure - Not Found Stuck on OCS: No schema for DSDT, KernelAndKextPatch, RtVariable, SMBIOS, SystemParameters... Stuck on OC: Driver XXX.efi at 0 cannot be found Stuck on Buffer Too Small Stuck on Plist only kext has CFBundleExecutable key Receiving Failed to parse real field of type 1 Stuck after selection macOS partition on OpenCore Can't select anything in the picker Stuck on This version of Mac OS X is not supported: Reason Mac... Couldn't allocate runtime area errors? SSDTs not being added Booting OpenCore reboots to BIOS Stuck on no vault provided! Turn off file vault in your config.plist under Misc -> Security -> Vault by setting it to: Optional If you have already executed the sign.command you will need to restore the Opencore.efi file as the 256 byte RSA-2048 signature has been shoved in. Can grab a new copy of Opencore.efi here: OpenCorePkg Stuck on OC: Invalid Vault mode This is likely a spelling mistake, options in OpenCore are case-sensitve so make sure you check closely, Optional is the correct way to enter it under Misc -> Security Stuck on EndRandomSeed Couple problems: ProvideConsoleGop is likely missing as this is needed for transitioning to the next screen, this was originally part of AptioMemoryFix but is now within OpenCore as this quirk. Can be found under UEFI -> Output Missing kernel patches(only applies for AMD CPUs, make sure they're Opencore patches and not Clover. Clover uses MatchOS while OpenCore has MinKernel and Maxkernel) IgnoreInvalidFlexRatio missing, this is needed for Broadwell and older. Not for AMD and Skylake or newer AppleXcpmExtraMsrs may be required, this is generally meant for Pentiums, HEDT and other odd systems. Don't use on AMD Another possible problem is that some users either forget or cannot disable CFG-Lock in the BIOS(specifically relating to a locked 0xE2 MSR bit for power management, obviously much safer to turn off CFG-Lock). Do note this is for Intel users only, not AMD. When this happens, there's a couple of possible fixes: Fixing CFG Lock Enable AppleXcpmCfgLock and AppleCpuPmCfgLock, this disables PKG_CST_CNFIG_CONTROL within the XNU and AppleIntelCPUPowerManagment respectively. Not recommended long term solution as this can cause instability. Another other possible problem is IRQ conflicts, Clover has plenty of different fixes that it can apply without you directly setting them. This makes it much more difficult when converting from Clover to OpenCore though luckily CorpNewt's also got a fix: SSDTTime's FixHPET option Can't see macOS partitions Main things to check: ScanPolicy set to 0 to show all drives Have the proper firmware drivers such as ApfsDriverLoader and HfsPlus(or VBoxHfs) Enable AvoidHighAlloc if you're running a network recovery install Black screen after picker This is due to missing ConsoleGOP, enable it under your config: UEFI -> Output -> ProvideConsoleGOP If this doesn't help, grab the debug versions of OpenCore.efi and BOOTx64.efi and replace them in your EFI. This will show much more info on where your hack is actually getting stuck. Stuck on OC: OcAppleGenericInput... - Success So this isn't actually an error, instead OpenCore isn't showing you all the debug info. This is right before/while the kernel is being loaded so things we need to check for: Intel: CFG-Lock disabled in the BIOS or AppleCpuPmCfgLock and AppleCpuPmCfgLock enabled under Kernel -> Quirks AMD: Verify you have added the correct kernel patches to your config(remember, OpenCore patches use MinKernel and MaxKernel while Clover has MatchOS) Ryzen/Threadripper(17h) Bulldozer/Jaguar(15h/16h) If this doesn't help, grab the debug versions of OpenCore.efi and BOOTx64.efi and replace them in your EFI. This will show much more info on where your hack is actually getting stuck. Stuck on OCB: OcScanForBootEntries failure - Not Found This is due to OpenCore being unable to find any drives with the current ScanPolicy, setting to 0 will allow all boot options to be shown Misc -> Security -> ScanPolicy -> 0 Stuck on OCB: failed to match a default boot option Same fix as OCB: OcScanForBootEntries failure - Not Found, OpenCore is unable to find any drives with the current ScanPolicy, setting to 0 will allow all boot options to be shown Misc -> Security -> ScanPolicy -> 0 Stuck on OCABC: Memory pool allocation failure - Not Found This is due to either incorrect BIOS settings and/or incorrect Booter values. Make sure config.plist -> Booter -> Quirks is correct and verify your BIOS settings: Above4GDecoding is Enabled CSM is Disabled(Enabling Windows8.1/10 WHQL Mode can do the same on some boards) Stuck on OCS: No schema for DSDT, KernelAndKextPatch, RtVariable, SMBIOS, SystemParameters... This is due to either using a Clover config with OpenCore or using a configurator such as Mackie's Clover and OpenCore configurator. You'll need to start over and make a new config or figure out all the garbage you need to remove from your config. This is why we don't support configurators, they are known for these issues Stuck on OC: Driver XXX.efi at 0 cannot be found Verify that your EFI/OC/Drivers matches up with your config.plist -> UEFi -> Drivers Stuck on Buffer Too Small UEFI -> Quirks -> AvoidHighAlloc -> Enable Enable Above4GDecoding in the BIOS Stuck on Plist only kext has CFBundleExecutable key Missing or incorrect Executable path Receiving \"Failed to parse real field of type 1\" A value is set as real when it's not supposed to be, generally being that Xcode converted HaltLevel by accident: HaltLevel 2147483648 To fix, swap real for integer: HaltLevel 2147483648 Stuck after selection macOS partition on OpenCore CFG-Lock not off(Intel Users only), couple solutions: Patch your MSR E2(Recommended solution) Enable AppleXcpmCfgLock and AppleCpuPmCfgLock, this disables PKG_CST_CNFIG_CONTROL within the XNU and AppleIntelCPUPowerManagment repectively. Not recommeneded long term solution as this can cause instability. AMD kernel patches aren't working(AMD Users only): Either outdated or missing kernel patches Incompatible keyboard driver: Disable PollAppleHotKeys and enable KeySupport, then remove OpenUsbKbDxe from your config.plist -> UEFI -> Drivers If the above doesn't work, reverse: disable KeySupport, then add OpenUsbKbDxe to your config.plist -> UEFI -> Drivers Can't select anything in the picker Incompatible keyboard driver: Disable PollAppleHotKeys and enable KeySupport, then remove OpenUsbKbDxe from your config.plist -> UEFI -> Drivers If the above doesn't work, reverse: disable KeySupport, then add OpenUsbKbDxe to your config.plist -> UEFI -> Drivers Stuck on This version of Mac OS X is not supported: Reason Mac... This error happens when SMBIOS is one no longer supported by that version of macOS, make sure values are set in PlatformInfo->Generic with Automatic enabled. Reminder of supported SMBIOS: iMac13,x+ iMacPro1,1 MacPro6,1+ MacBook8,1+ MacBookAir5,x+ MacBookPro9,x+ Couldn't allocate runtime area errors? See Fixing KASLR slide values SSDTs not being added So with Opencore, there's some extra security checks added around ACPI files, specifically that table length header must equal to the file size. This is actually the fault of iASL when you compiled the file. Example of how to find it: * Original Table Header: * Signature \"SSDT\" * Length 0x0000015D (349) * Revision 0x02 * Checksum 0xCF * OEM ID \"ACDT\" * OEM Table ID \"SsdtEC\" * OEM Revision 0x00001000 (4096) * Compiler ID \"INTL\" * Compiler Version 0x20190509 (538510601) The Length and checksum value is what we care about, so if our SSDT is actually 347 bytes then we want to change Length to 0x0000015B (347)(the 015B is in HEX) Best way to actually fix this is to grab a newer copy of iASL or Acidanthera's copy of maciASL and remaking the SSDT Booting OpenCore reboots to BIOS Incorrect EFI folder structure, make sure all of your OC files are within an EFI folder located on your ESP(EFI system partition) macOS booting Stuck on RTC..., PCI ConfigurationBegins, Previous Shutdown..., HPET, HID: Legacy... \"Waiting for Root Device\" or Prohibited Sign error macOS installer in Russian macOS Installer being damadged Stuck on or near IOConsoleUsers: gIOScreenLock... Black screen after IOConsoleUsers: gIOScreenLock... on Navi 300 series Intel stalling on apfs_module_start... Stalling on apfs_module_start..., Waiting for Root device, Waiting on...IOResources..., previous shutdown cause... in Catalina Kernel Panic Cannot perform kext summary Kernel Panic AppleIntelMCEReporter Kernel Panic AppleIntelCPUPowerManagement Stop Sign with corrupted text(Still waiting for Root Device) Frozen in the macOS installer after 30 seconds 15h/16h CPU reboot after Data & Privacy screen Sleep crashing on AMD Stuck on RTC..., PCI Configuration Begins, Previous Shutdown..., HPET, HID: Legacy... Well this general area is where a lot of PCI devices are configured, and is where most booting issues with AMD hacks happen. The main places to check: Missing EC patch: For dekstops, make sure you have your EC SSDT both in EFI/OC/ACPI and ACPI -> Add, double check it's enabled. If you don't have one, grab it here: Getting started with ACPI Laptop users will need to rename their main EC: Getting started with ACPI IRQ conflict: Most common on older laptops and prebuilts, run SSDTTime's FixHPET option and add the resulting SSDT-HPET.aml and ACPI patches to your config( the SSDT will not work without the ACPI patches) PCI allocation issue: UPDATE YOUR BIOS, make sure it's on the latest. Most OEMs have very broken PCI allocation on older firmwares Make sure either Above4GDecoding is enabled in the BIOS, if no option availible then add npci=0x2000 to boot args. Do not have both the Above4G setting enabled and npci in boot args, they will conflict Other BIOS settings that are important: CSM disabled, Windows 8.1/10 UEFI Mode enabled\\ \"Waiting for Root Device\" or Prohibited Sign error Generally seen as a USB error, couple ways to fix: if you're hitting the 15 port limit, you can temporarily get around this with XhciPortLimit but for long term use, we recommend making a USBmap. CorpNewt also has a guide for this: USBmap Guide Another issue can be that certain firmware won't pass USB ownership to macOS, to fix this we can enable ReleaseUsbOwnership. Clover equivalent is FixOwnership macOS installer in Russian Default sample config is in russian because slavs rule the Hackintosh world, check your prev-lang:kbd value under NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82. Set to 656e2d55533a30 for American: en-US:0 and a full list can be found in AppleKeyboardLayouts.txt You may also need to reset NVRAM in the boot picker as well Still didn't work? Well time for the big guns. We'll force remove that exact property and let OpenCore rebuild it: NVRAM -> Block -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> Item 0 then set it Type String and Value prev-lang:kbd macOS Installer being damadged If you've download macOS before October 2019, you likely have an expired macOS Installer certificate, there's 2 ways to fix this: Download newest copy of macOS Change date in terminal to when the certificate was valid For the latter: Disconnect all networking devices(Ethernet, disable Wifi) In the recovery terminal set to September 1st, 2019: date 0901000019 Stuck on or near IOConsoleUsers: gIOScreenLock... This is right before the GPU is properly initialized, verify the following: GPU is UEFI capable(GTX 7XX/2013+) CSM is off in the BIOS Forcing PCIe 3.0 link speed Black screen after IOConsoleUsers: gIOScreenLock... on Navi Add agdpmod=pikera to boot args switch between different display outputs 300 series Intel stalling on apfs_module_start... Commonly due to systems running AWAC clocks, pleas see the Getting started with ACPI section Stalling on apfs_module_start..., Waiting for Root device, Waiting on...IOResources..., previous shutdown cause... in Catalina Verify your EC SSDT is enabled and correct for your system. See the What's new in macOS Catalina post for more info Kernel Panic Cannot perform kext summary Generally seen as an issue surrounding the prelinked kernel, specifically that macOS is having a hard time interpreting the ones we injected. Verify that your kexts are in the correct order(master then plugins, Lilu always being first) and that kexts with executables have them and plist only kexts don't. Kernel Panic AppleIntelMCEReporter With macOS catalina, dual socket support is broken, and a fun fact about AMD firmware is that some boards will actually report multiple socketed CPUs. To fix this, add AppleMCEReporterDisabler to both Kernel Panic AppleIntelCPUPowerManagement This is likely due to faultly or outright missing NullCPUPowerManagement, the one hosted on AMD OSX's Vanilla Guide is corrupted. Go yell at Shannee to fix it. To fix the issue, remove NullCPUPowerManagement from Kernel -> Add and EFI/OC/Kexts then enable DummyPowerManagement under Kernel -> Quirks Stop Sign with corrupted text(Still waiting for Root Device) With OS X 10.11 El Capitan, Apple imposed a 15 USB port limit. To get around this we actually create a USB map to include ports we want and kick out extras we don't care about. For install, set Kernel -> Quirks -> XhciPortLimit -> Enabled but for post install we recommend making a map as the port limit patch isn't guaranteed to work with future versions of macOS. First try your USB stick in a different USB port. For 15h and 16h AMD CPUs, you may need to add the following: XLNCUSBFix.kext If XLNCUSBFix still doesn't work, then try the following: AMD StopSign-fixv5 Frozen in the macOS installer after 30 seconds This is likely due to faultly or outright missing NullCPUPowerManagement, the one hosted on AMD OSX's Vanilla Guide is corrupted. Go yell at Shannee to fix it. To fix the issue, remove NullCPUPowerManagement from Kernel -> Add and EFI/OC/Kexts then enable DummyPowerManagement under Kernel -> Quirks 15h/16h CPU reboot after Data & Privacy screen Follow directions here after UPDATE 2: Fix Data and Privacy reboot macOS frozen right before login This is a common example of screwed up TSC, for most system add VoodooTSCSync For Skylake-X, many firmwares including Asus and EVGA won't write to all cores. So we'll need to reset the TSC on cold boot and wake with TSCAdjustReset. Compiled version can be found here: TSCAdjustReset.kext. Note that you must open up the kext(ShowPackageContents in finder, Contents -> Info.plist) and change the Info.plist -> IOKitPersonalities -> IOPropertyMatch -> IOCPUNumber to the number of CPU threads you have starting from 0(i9 7980xe 18 core would be 35 as it has 36 threads total) macOS post-install Broken iMessage and Siri No on-board audio BIOS reset or sent into Safemode after reboot/shutdown? macOS GPU acceleration missing on AMD X570 DRM Broken \"Memory Modules Misconfigured\" on MacPro7,1 Apps crashing on AMD Broken iMessage and Siri En0 device not setup as Built-in, couple ways to fix: Find PCI path for your NIC with gfxutil(ie: ethernet, GBE1, ). Then via DeviceProperties in your config.plist, apply the property of built-in with the value of 01 and type Data. Hackintool can also grab the PCIRooth path if you're having issues with gfxutil. Recommended method NullEthernet.kext + SSDT-RMNE. Only recommended when first solution doesn't work If these fixes do not work, see the Fixing iServices page for more in-depth guide. No on-board audio Refer to Fixing Audio with AppleALC section BIOS reset or sent into Safemode after reboot/shutdown? Issue with AppleRTC, quite a simple fix: Under Kernel -> patch: Key Type Value Comment String Disable RTC checksum update on poweroff Enabled String YES Count Number 1 Base String __ZN8AppleRTC14updateChecksumEv Identifier String com.apple.driver.AppleRTC Limit Number 0 Find Data Replace Data c3 Note: This patch no longer works with macOS Catalina 10.15.4, you'll need to use RTCMemoryFixup and exclude ranges. See here for more info macOS GPU acceleration missing on AMD X570 Verify the following: GPU is UEFI capable(GTX 7XX/2013+) CSM is off in the BIOS Forcing PCIe 3.0 link speed DRM Broken See Fixing DRM page \"Memory Modules Misconfigured\" on MacPro7,1 Add MacProMemoryNotificationDisabler kext to EFI/OC/Kexts and Kernel -> Add. Note that this kext has an odd quirk here it requires WhateverGreen to function correctly. Apps crashing on AMD Easy fix, buy Intel So with AMD, whenever Apple calls CPU specific functions the app witll either not work or outright crash. Here are some apps and their \"fixes\": Adobe Products don't always work Some fixes can be found here: Adobe Fixes Do note these fixes just disables functionality, they're not really fixes Virtual Machine running off of AppleHV's framework will not work(ie: Parallels 15, Vmware) VirtualBox works fine as it doesn't use AppleHV VMware 10 and older can work as well Parallels 13.1.0 and older are known to work as well Docker broken Docker toolbox is the only solution as it's based off of VirtualBox, many feautures are unavailble with this version Xcode AppleWatch simulator is broken in Catalina Mojave works fine IDA Pro won't install There's an Intel specific check in the installer, app itself is likely fine 15/16h CPU webpages crashing Follow directions here after UPDATE 5: Fix webpages Sleep crashing on AMD This is generally seen on AMD who use the chipset's USB controller, specifically for the Ryzen series and newer. The main way to tell if you're having issues with this is checking logs after either sleeping or waking: In terminal: log show --last 1d | grep \"Wake reason\" verify it Should result in something like this: Sleep transition timed out after 180 seconds while calling power state change callbacks. Suspected bundle: com.apple.iokit.IOUSBHostFamily. You can double check which controller is XHC0 via IOReg and checking the Vendor ID(1022 for AMD chipset). The fix for this sleep issue is either: Avoid the chipset USB all together(ideally set _STA = 0x0 to disabe the controller outright with an SSDT) Correct the USBX power properties to what the controller expects Other issues Can't run acpidump.efi Fixing SSDTTime: Could not locate or download iasl! Fix Python: Python is not installed or not found on PATH Windows Startup Disk can't see APFS drives Incorrect resolution with OpenCore No temperature/fan sensor output Can't find Windows/Bootcamp drive in picker Booting Windows results in Bluescreen or Linux crashes Booting Windows error: OCB: StartImage failed - Already started iASL warning, # unresolved Can't run acpidump.efi Call upon OpenCore shell: shell> fs0: //replace with proper drive fs0:\\> dir //to verify this is the right directory Directory of fs0:\\ 01/01/01 3:30p EFI fs0:\\> cd EFI\\OC\\Tools //note that its with forward slashes fs0:\\EFI\\OC\\Tools> acpidump.efi -b -n DSDT -z Fixing SSDTTime: Could not locate or download iasl! This is usually due to an outdated version of Python, try either updating Python or add iasl to the scripts folder for SSDTTime: iasl macOS version iasl Windows version iasl Linux version Fix Python: Python is not installed or not found on PATH Easy fix, download and install the latest python: macOS link Windows link Linux link Make sure Add Python to PATH Windows Startup Disk can't see APFS drives Outdated Bootcamp drivers(generally ver 6.0 will come with brigadier, BootCamp Utility in macOS provides newer version like ver 6.1). CorpNewt has also forked brigadier fixing these issues as well: CorpNewt's brigadier Incorrect resolution with OpenCore Follow Hiding Verbose for correct setup, set UIScale to 02 for HiDPI Users also have noticed that setting ConsoleMode to Max will sometimes fail, leaving it empty can help No temperature/fan sensor output So couple things: iStat Menus doesn't yet support MacPro7,1 readouts VirtualSMC's bundled sensors do not support AMD For iStat, you'll have to wait for an update. For AMD users, you can use either: SMCAMDProcessor Still in early beta but great work has been done, note it's been mainly tested on Ryzen FakeSMC3_with_plugins Note for AMD with FakeSMC: FileVault support requires more work with FakeSMC Make sure no other SMC kexts are present, specifically those from VirtualSMC Can't find Windows/Bootcamp drive in picker So with OpenCore, we have to note that legacy Windows installs are not supported, only UEFI. Most installs now are UEFI based but those made by BootCamp Assistant are legacy based, so you'll have to find other means to make an installer(Google's your friend). This also means MasterBootRecord/Hybrid partitions are also broken so you'll need to format the drive you want to install onto with DiskUtility. See the Multiboot Guide on best practices Now to get onto troubleshooting: Make sure Misc -> Security -> ScanPolicy is set to 0 to show all drives Enable Misc -> Boot -> Hideself is enabled when Windows bootloader is loacated on the same drive Enable Platforminfo -> Generic -> AdviseWindows -> True if the EFI partition isn't the first on the partition table Booting Windows results in Bluescreen or Linux crashes This is due to alignment issues, make sure SyncRuntimePermissions is enabled on firmwares supporting MATs. Check your logs whether your fimrware supports Memory Attribute Tables(generally seen on 2018 firmwares and newer) Common Windows error code: 0xc000000d Booting Windows error: OCB: StartImage failed - Already started This is due to OpenCore getting confused when trying to boot boot Windows and acidentally thinking it's booting OpenCore. This can be avoided by either adding a custom drive path under entires and have Windows with it's bootloader renamed or move Windows to it's own drive iASL warning, # unresolved If you try to decompile your DSDT and get an error similar to this: iASL Warning: There were 19 external control methods found during disassembly, but only 0 were resolved (19 unresolved) This happens when one ACPI table requires the rest for proper referncing, it does not accect the creation of DSDTs as we're only using it for creating a select few SSDTs. For those who are worried, you can run the following: iasl * [insert all ACPI files here] "},"troubleshooting/debug.html":{"url":"troubleshooting/debug.html","title":"OpenCore Debugging","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) OpenCore Debugging Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide Needing to figure out why you're getting issues or stalling? Well, you've come to the right place. To start, make sure you're using either the DEBUG or NOOPT versions of OpenCore. This will provide much more info than the RELEASE version. Target Used for enabling different levels of debugging 0x01 — Enable Logging 0x02 — Enable Onscreen debug 0x04 — Enable logging to Data Hub. 0x08 — Enable serial port logging. 0x10 — Enable UEFI variable logging. 0x20 — Enable non-volatile UEFI variable logging. 0x40 — Enable logging to file. To calculate the target, we can use a HEX calculator and then convert it to decimal. For us we want to have our values on stored onto a .txt file for later viewing: 0x01 — Enable Logging 0x02 — Enable Onscreen debug 0x10 — Enable UEFI variable logging. 0x40 — Enable logging to file. 0x01 + 0x02 + 0x10 + 0x40 = 0x53 0x53 converted to decimal becomes 83 So we can set Misc -> Debug -> Target -> 83 DisplayLevel Used for setting what is logged 0x00000002 — DEBUG_WARN in DEBUG, NOOPT, RELEASE. 0x00000040 — DEBUG_INFO in DEBUG, NOOPT. 0x00400000 — DEBUG_VERBOSE in custom builds. 0x80000000 — DEBUG_ERROR in DEBUG, NOOPT, RELEASE. A full list can be found in DebugLib.h. For us we just want the following: 0x00000002 — DEBUG_WARN in DEBUG, NOOPT, RELEASE. 0x00000040 — DEBUG_INFO in DEBUG, NOOPT. 0x80000000 — DEBUG_ERROR in DEBUG, NOOPT, RELEASE. Just like with Target, we use a HEX calculator then convert to decimal: 0x80000042 Converted to decimal Misc -> Debug -> DisplayLevel -> 2147483714 DisableWatchdog: YES Disables the UEFI watchdog, used for when OpenCore is stalling on something non-critical. Disabling logging To remove all file logging, set Target to 0 "},"extras/legacy.html":{"url":"extras/legacy.html","title":"Legacy Install","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Legacy Install Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide Wanna try OpenCore but can't boot UEFI based sources? Well don't fret, there's hope for you! OpenCore supports DuetPkg which emulates a UEFI environment for legacy systems. To start, you need the following: BootInstall.command Install source(MacOS Journaled + GUID, size of USb depends on the version of macOS. 16GB recommended for catalina) Within your OpenCore build folder, navigate to Utilities/BootInstall. Here you'll find a file called BootInstall.command. What this does is install DuetPkg to your desired drive. Now you'll want to run BootInstall.command, do note that you may need sudo for this to work correctly on newer versions of macOS sudo Utilities/BootInstall/BootInstall.command This will give you a list of available disks, choose yours and you will be prompted to write a new MBR. Choose yes[y] and you'll be finished. This will provide you with an EFI partition with a boot file, this is where we'll add our OpenCore EFI. Note: The firmware drivers used for legacy users differ slightly: OpenUsbKbDxe.efi For picker support in the Opencore menu HfsPlusLegacy.efi Needed for seeing Hfs drives like installers, the legacy variant is required for SnadyBridge and older due to missing RDRAND instruction support "},"extras/gui.html":{"url":"extras/gui.html","title":"Add GUI and Bootchime","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) OpenCore beauty treatment Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide Main thing this guide will go over: Giving OpenCore a GUI Setting up a bootchime Setting up OpenCore's GUI So to get started, we're gonna need 0.5.7 as this build version has the GUI included with the rest of the files. If you're on an older version, I recommend updating: Updating OpenCore Once that's done, we'll need a couple things: Binary Resources OpenCanopy.efi Once you have both of these, we'll next want to add it to our EFI partition: Add the Resources folder to EFI/OC Add OpenCanopy.efi to EFI/Drivers Now in our config.plist, we have 2 things we need to fix: Misc -> PickerMode -> External UEFI -> Drivers and add OpenCanopy.efi Once all this is saved, you can reboot and be greeted with a true Mac-like GUI Setting up Bootchime with AudioDxe So to start, we'll need a couple things: Onboard audio output USB DACs will not work AudioDxe in both EFI/OC/Drivers and UEFI -> Drivers Binary Resources Add the Resources folder to EFI/OC, just like we did with the OpenCore GUI section Debug version of OpenCore with logging enabled See OpenCore Debugging for more info Settings up NVRAM: NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82: SystemAudioVolume | Data | 0x46 This is the bootchime and screenreader volume, note it's in hexidecimal so would become 70 in decimal Setting up UEFI -> Audio: AudioCodec: Codec address of Audio controller To find yours: Check IOReg -> HDEF and see the IOHDACodecAddress property ex: 0x0 Audio Device: PciRoot of audio controller Run gfxutil to find the path: /path/to/gfxutil -f HDEF ex: PciRoot(0x0)/Pci(0x1f,0x3) AudioOut: The specific output of your Audio controller, easiest way to find the right one is to go through each one(from 0 to N - 1) ex: 2 You can find all the ones for your codec in the OpenCore debug logs: 06:065 00:004 OCAU: Matching PciRoot(0x0)/Pci(0x1F,0x3)/VenMsg(A9003FEB-D806-41DB-A491-5405FEEF46C3,00000000)... 06:070 00:005 OCAU: 1/2 PciRoot(0x0)/Pci(0x1F,0x3)/VenMsg(A9003FEB-D806-41DB-A491-5405FEEF46C3,00000000) (5 outputs) - Success AudioSupport: Set this to True MinimumVolume: Volume level from 0 to 100 To not blow the speakers, set it to 70 Note bootchime will not play if MinimumVolume is higher than SystemAudioVolume PlayChime: Set this to True VolumeAmplifier: The Volume amplification, value will differ depending on your codec Formula is as follows: (SystemAudioVolume * VolumeAmplifier)/100 = Raw Volume(but cannot exceed 100) ex: (70 VolumeAmplifier)/100 = 100 -> (100 ``100) / 70 = VolumeAmplifier = 142.9(we'll round it to 143 for simplicity) Once done, you should get something like this: Note for visually impaired: OpenCore hasn't forgotten about you! With the AudioDxe setup, you can enable both picker audio and FileVault voiceover with these 2 settings: Misc -> PickerAudioAssist -> True to enable picker audio UEFI -> Protocols -> AppleAudio -> True to enable FileVault voice over See Security and FileVault on how to setup the rest for proper FileVault support "},"extras/gpu-patches.html":{"url":"extras/gpu-patches.html","title":"iGPU Patching","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) GPU Patching Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide This little section is for those who need more than what is provided by simple framebuffer patching and WhateverGreen's autopatches: Applying a fakeID for unsupported GPUs iGPU BusID patching for 300 series motherboards Converting a clover fakeID to OpenCore Guide moved here: Renaming GPUs iGPU BusID Patching This section is for users running \"true\" 300 series motherboards( B360, B365, H310, H370, Z390) who are having issues setting up their iGPU as a display out. So to get started I'll assume you've already done basic framebuffer patches in your config from the Coffeelake portion of the guide, it should look something like this: Now that we're prepped, we can start looking into busID patching. Checking the dumps on Insanelymac shows us this for the 3E9B0007 ID(Desktop UHD 630): ID: 3E9B0007, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00801302 TOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes) GPU Name: Intel UHD Graphics 630 Model Name(s): Camelia: Disabled Mobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3 [1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP [2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - DP [3] busId: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003C7 - DP 01050900 00040000 C7030000 02040A00 00040000 C7030000 03060800 00040000 C7030000 Looking at all this can be quite overwheling, but we'll break it down to be a bit simpler. For use we care about this: [1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP [2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - DP [3] busId: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003C7 - DP 01050900 00040000 C7030000 02040A00 00040000 C7030000 03060800 00040000 C7030000 These are your iGPUs ports by default, lets go through port 1 and see what each section is used for: The first port: 01050900 00040000 C7030000 Port: 01 01050900 00040000 C7030000 busId: 0x05 01050900 00040000 C7030000 Pipe Number 9 (little endian): 01050900 00040000 C7030000 Connector type: DisplayPort 01050900 00040000 C7030000 Flags - We leave it as default: 01050900 00040000 C7030000 Things to note: You cannot use the same busId twice, having 2 in use will create conflicts Pipe number and flags don't need to changed List of connector types: 00 04 00 00 - DisplayPort 00 08 00 00 - HDMI 04 00 00 00 - Digital DVI 02 00 00 00 - LVDS (for laptops) 01 00 00 00 - Dummy port Mapping video ports Plug display into HDMI port Set Port 1 to the HDMI connector type: 01xx0900 00080000 C7030000 Disable ports 2 and 3 with busid=00: 02000A00 00040000 C7030000 03000800 00040000 C7030000 Walk through busids for Port 1 if the previous didn't work(yup you gotta do a shit ton of reboots). The maximum busid on most platforms is 0x06 01010900 00080000 C7030000 01020900 00080000 C7030000 01030900 00080000 C7030000 etc If you still get no output, set port 1's busid to 00 and start going through busids for port 2 and so on 01000900 00040000 C7030000 02xx0A00 00080000 C7030000 03000800 00040000 C7030000 Adding to your config.plist So adding these patches are simple though a bunch of entires are required: framebuffer-con0-enable = 01000000 framebuffer-con1-enable = 01000000 framebuffer-con2-enable = 01000000 framebuffer-con0-alldata = port 1 framebuffer-con1-alldata = port 2 framebuffer-con2-alldata = port 3 So when adding the patches, port 1 will actually become con0 as the ports start at 0. These are also all data types when entering your values. A finished config should look something like this: Source for iGPU BusID patching: CorpNewt's Brain "},"extras/kalsr-fix.html":{"url":"extras/kalsr-fix.html","title":"Fixing KASLR slide values","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Fixing KASLR slide values Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide Fixing KASLR slide values This section is for users who wish to understand and fix \"Couldn't allocate runtime area\" errors. This is most common with either Z390, X99 and X299. This section will also support Clover as the info is also useful for them. So what is KASLR? Well KASLR stands for Kernel address space layout randomization, what it's used for is security purposes. Specifically, this makes it much harder for attackers to figure out where the important objects are in memory as it's always random both between machines and between boots. More in-depth explainer on KASLR Where this becomes an issue is when you introduce devices with either small memory maps or just way too many devices present. There likely is space for the kernel to operate but there's also free space where the kernel won't fit entirely. This is where slide=xxx fits in. Instead of letting macOS choose a random area to operate in each boot, we'll constrain it to somewhere that we know will work. And who is this info for? Well as I mentioned earlier, this is for users who don't have enough space for the kernel or moves to a place that is too small. You'll generally experience an error similar to this when booting: Error allocating 0x1197b pages at 0x0000000017a80000 alloc type 2 Couldn't allocate runtime area With some variation: Only 244/256 slide values are usable! Or even crashes while running macOS: panic(cpu 6 caller 0xffffff801fc057ba): a freed zone element has been modified in zone kalloc.4096: expected 0x3f00116dbe8a46f6 but found 0x3f00116d00000000 The best part about these errors is that they can be random, also the reason why power cycling your PC 20 times also can fix the issue but only temporarily. Fun Fact: It takes around 31 ms to find an area to operate in, manually setting a slide value can on average can reduce boot times by 0.207%!!! So how do I fix this? The real fix to this is quite simple actually, the process is both the same for Clover and OpenCore users. What you'll need: Clover users: Clover Shell(most users already have this included, usually called shell64.efi or some variation) This will be found under EFI/CLOVER/tools If you're missing this, you can grab it from the CLOVER.zip OcQuirks(Don't mix Aptio fixes together or use OsxAptioFixDrvX, AptioMemoryFix, only OcQuirks is supported in this guide) Make sure this is inside EFI/CLOVER/drivers/UEFI OpenRuntime.efi(Bundled with OcQuirks) Make sure this is inside EFI/CLOVER/drivers/UEFI OcQuirks.plist(Bundled with OcQuirks) Make sure this is inside EFI/CLOVER/drivers/UEFI OpenCore users: OpenRuntime OpenShell(Don't forget to enable this under Root -> Misc -> Tools) And we'll also need to configure our config.plist -> Booter(for OpenCore) or OcQuirks.plist(for Clover): AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: YES Reduces Stolen Memory Footprint, expands options for slide=N values and very helpful with fixing Memory Allocation issues on Z390. EnableSafeModeSlide: YES Allows for slide values to be used in Safemode ProtectUefiServices: NO Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, 300 series and newer systems like Ice Lake and Comet Lake ProvideCustomSlide: YES This makes sure the kernel will only choose good regions and avoid those that may result inboot failures. It's still random but omits those bad reions in its randomization RebuildAppleMemoryMap: YES Generates Memory Map compatible with macOS, this makes sure our memory map will fit to what the kernel expects Prepping the BIOS The reason we need to reset the memory map is we want it to be more deterministic, what I mean by this is that there will be less variation on each boot so we have fewer edge cases(Memory Maps are not always consistent on boots). To prep: Update BIOS(extremely important as early BIOS's shipped are known to have memory map issues, especially with Z390) Clear CMOS Enable much needed BIOS settings: Above4GDecoding: This allows devices to use memory regions above 4GB meaning macOS will have more room to fit, can be problematic on some X99, X299 so recommended to test with and without. Boot Options -> Windows8.1/10 mode: This will make sure no old legacy garbage is loaded. Fun fact, other OS is only designed for booting older versions of Windows and not for other OS. Disable as many unneeded devices in the BIOS(this means there is less variation in the map on each boot, so fewer chances of boot failure). Common settings: CSM: For legacy support, adds a bunch of garbage we don't want. This also can break the shell so you can't boot into it. Intel SGX: Software Guard Extensions, takes up a lot of space and does nothing in macOS. Parallel Port: macOS can't even see parallel. Serial Port: I'd like to know how many of you are debugging the kernel... iGPU: Not ideal but some systems have such bloated maps that the iGPU just can't fit. Thunderbolt: Many hacks don't have thunderbolt working, boards that don't have thunderbolt but have this option just waste more space. LED lighting: Sorry mate, time to go. Legacy USB: More Legacy Crap. Test boot With our adjusted EFI, config.plist and BIOS settings, it's time we try out our new setup. If you still have issues, well it looks like we'll need to do a deep dive and calculate our slide value Finding the Slide value Now what you'll want to do is open the EFI shell in your boot manager of choice and run memmap. This will give you a list of all pages and their sizes. This is where the fun begins. Example of what you'll see: Type Start End # Pages Attributes RT_Data 0000000000000000 0000000000000FFF 0000000000000001 800000000000000F Available 0000000000001000 0000000000057FFF 0000000000000057 000000000000000F Reserved 0000000000058000 0000000000058FFF 0000000000000001 000000000000000F Available 0000000000059000 000000000008FFFF 0000000000000037 000000000000000F RT_Code 0000000000090000 0000000000090FFF 0000000000000001 800000000000000F Available 0000000000091000 000000000009DFFF 000000000000000D 000000000000000F Reserved 000000000009E000 000000000009FFFF 0000000000000002 000000000000000F Available 0000000000100000 000000005B635FFF 000000000005B536 000000000000000F BS_Data 000000005B636000 000000005B675FFF 0000000000000040 000000000000000F Available 000000005B676000 000000006AF77FFF 000000000000F902 000000000000000F LoaderCode 000000006AF78000 000000006B155FFF 00000000000001DE 000000000000000F BS_Data 000000006B156000 000000006B523FFF 00000000000003CE 000000000000000F ACPI_NVS 000000006B524000 000000006B524FFF 0000000000000001 000000000000000F BS_Data 000000006B526000 000000006B625FFF 0000000000000100 000000000000000F Available 000000006B626000 000000006B634FFF 000000000000000F 000000000000000F Now you may be wondering how the hell we convert this to a slide value, well it's quite simple. What we're interested in is the largest available value within the Start column. In this example we see that 000000006B626000 is our largest, do note that these are in HEX so if there are multiple values close to each other you may need to convert them to decimal. To the calculate slide value(macOS's built-in calculator has a programming function by pressing ⌘+3): 000000006B626000 = 0x6B626000 (0x6B626000 - 0x100000)/0x200000 = 0x35A And to verify that this is correct: 0x100000 + (0x35A * 0x200000) = 0x6B500000 Whenever the returned value is not the original(0x6B500000 vs 0x6B626000), just add +1 to your final slide value. This is due to rounding. So for example 0x35A converted to decimal becomes 858 and then +1 will give you slide=859. But wait for just a second, this is higher than 256! That is correct, this is caused by memory maps that include Above4GDecoding sectors which cannot be used. So you will need to keep going down the list until you find a small enough value(for us that would be 0000000000100000). And just to make it a bit clearer on the formula: (HEX - 0x100000)/0x200000 = Slide Value in HEX 0x100000 + (Slide Value in HEX * 0x200000) = Your original HEX value(if not then add +1 to your slide value) Now navigate into your config.plist and add your slide value with the rest of your boot arguments(for us it would be slide=0 when using 0x100000). If this value still gives you errors then you may proceed to the second-largest Start value and so on. Sometimes you may find that when you calculate slide that you receive super small vales like slide=-0.379150390625, when this happens round this to slide=0. And for users who are having issues finding their slide value can also type $slide [insert largest #Pages value] in the #Sandbox channel on the r/Hackintosh Discord But this is soooooo hard Well fret not, for there is a simple solution. After running memmap in the shell, run: shell> fs0: //replace with your USB fs0:\\> dir //to verify this is the right directory, if not try fs1 and so on Directory of fs0:\\ 01/01/01 3:30p EFI fs0:\\> memmap > memmap.txt This will add a memmap.txt file to the root of your EFI, you can then proceed to drop it into the r/Hackintosh discord in the #Sandbox channel and type $slide [insert a link to memmap.txt] Using DevirtualiseMmio DevirtualiseMmio is quite an interesting quirk, specifically in that it gets around a huge hurdle with many PCI device systems like some Z390 boards and virtually all HEDT boards like X99 and X299. How it does this is it takes MMIO regions and removes runtime attributes allowing them to be used as space for the kernel to sit comfortably, pair this with ProvideCustomSlide qurik means we can keep the secuirty feature of slide while also getting a bootable machine. For extremely problamatic systems like Threadripper TRX40 19H, we need to find specific regions that aren't required for proper operation. This is where MmioWhitelist comes into play. Note that whitelisting isn't required for most systems If you run the debug version of OpenCore with DevirtualiseMmio, you'll notice this in your logs: 21:495 00:009 OCABC: MMIO devirt start 21:499 00:003 OCABC: MMIO devirt 0x60000000 (0x10000 pages, 0x8000000000000001) skip 0 21:503 00:003 OCABC: MMIO devirt 0xFE000000 (0x11 pages, 0x8000000000000001) skip 0 21:506 00:003 OCABC: MMIO devirt 0xFEC00000 (0x1 pages, 0x8000000000000001) skip 0 21:510 00:003 OCABC: MMIO devirt 0xFED00000 (0x1 pages, 0x8000000000000001) skip 0 21:513 00:003 OCABC: MMIO devirt 0xFEE00000 (0x1 pages, 0x800000000000100D) skip 0 21:516 00:003 OCABC: MMIO devirt 0xFF000000 (0x1000 pages, 0x800000000000100D) skip 0 21:520 00:003 OCABC: MMIO devirt end, saved 278608 KB Note: See OpenCore Debugging on how to enable logging to file So we have 6 regions we need to go through and see which are bad, best idea is to block all MMIO sections except one and try each region to get a list of good regions. Now lets take the above example and create our own MmioWhitelist, we'll need to first convert the address from hexidecimal to decimal: MMIO devirt 0x60000000 -> 1610612736 MMIO devirt 0xFE000000 -> 4261412864 MMIO devirt 0xFEC00000 -> 4273995776 MMIO devirt 0xFED00000 -> 4275044352 MMIO devirt 0xFEE00000 -> 4276092928 MMIO devirt 0xFF000000 -> 4278190080 Should look something like this when done: "},"extras/spoof.html":{"url":"extras/spoof.html","title":"Disabling unsupported GPUs","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Disabling GPU Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide GPU Spoof So you need to hide your unsupported GPU? Well with OpenCore things are slightly different, specifically that we need to specify to which exact device we want to spoof. There are 3 ways we can do this: Boot Flag Disables all GPUs except the iGPU DeviceProperties Disables GPU on a per-slot basis SSDT Disables GPU on a per-slot basis CSM must be off in the BIOS for the spoofing to work correctly, especially on AMD CPU based systems Boot Flag By far the simplest way, all you need to do is add the following boot-arg: -wegnoegpu Do note that this will disable all GPUs excluding the iGPU DeviceProperties Method Here is quite simple, find the PCI route with gfxutil and then create a new DeviceProperties section with your spoof: path/to/gfxutil -f GFX0 And the output will result in something similar: DevicePath = PciRoot(0x0)/Pci(0x1,0x0)/Pci(0x0,0x0)/Pci(0x0,0x0)/Pci(0x0,0x0) With this, navigate towards Root -> DeviceProperties -> Add and add your PCI route with the following properties: Key Type Value name data 23646973706C6179 IOName string #display class-code data FFFFFFFF SSDT Method There are many ways to find the path but generally, the easiest way is to get into Device Manager under windows and find the PCI path. Example of device path: \\_SB.PCI0.PEG0.PEGP DefinitionBlock (\"\", \"SSDT\", 2, \"hack\", \"spoof\", 0x00000000) { External (_SB_.PCI0.PEG0.PEGP, DeviceObj) // (from opcode) Method (_SB.PCI0.PEG0.PEGP._DSM, 4, NotSerialized) // _DSM: Device-Specific Method { If (LOr (LNot (Arg2), LEqual (_OSI (\"Darwin\"), Zero))) { Return (Buffer (One) { 0x03 }) } Return (Package (0x0A) { \"name\", Buffer (0x09) { \"#display\" }, \"IOName\", \"#display\", \"class-code\", Buffer (0x04) { 0xFF, 0xFF, 0xFF, 0xFF }, \"vendor-id\", Buffer (0x04) { 0xFF, 0xFF, 0x00, 0x00 }, \"device-id\", Buffer (0x04) { 0xFF, 0xFF, 0x00, 0x00 } }) } } A copy of this SSDT can be found here: Spoof-SSDT.dsl You will need MaciASL to compile this, reminder that .aml is assembled and .dsl is source code. You can compile with MaciASL by running File -> Save As -> ACPI Machine Language. Source: CorpNewt Fixing Windows So something that many users are annoyed about is the fact that you need to switch between GPU outputs. Well a neat little trick on Windows is that you can reroute your display options to a specific GPU: "},"misc/credit.html":{"url":"misc/credit.html","title":"Credit","keywords":"","body":" Last modified: Tue Apr 14 2020 15:52:12 GMT+0000 (Coordinated Universal Time) Credit Supported version: 0.5.7 Attention to all users, please note this guide and other khronokernel sites will be shutting down on April 16th, 2020. Reason for this is we've decided to move the guides to a dedicated organization to help simplify the hackintosh process and provide a single, trusted source for hackintosh information. This new organization will be known as Dortania. Links to the new sites: OpenCore Desktop Guide Getting Started with ACPI GPU Buyers Guide Wireless Buyers Guide Anti-Hackintosh Buyers Guide No good guide is made by one man, here's credit to those who've helped out: vit9696 One of many developers of OpenCore Corrections to the original guide Corrections to this guide...(seriously this man deserves a medal) CorpNewt Heavily inspiring this guide(if not a rip off) and helping overal with questions and advice Spoof SSDT source Midi Corrections and recommendations for the guide AlGrey#9303 AMD Kernel patches NoOne/IOIIIO For the original AMD Vanilla Guide Corrections to AMD portion of the guide And to the rest who've helped out as well, thank you! Developers of OpenCore: al3xtjames Andrey1970AppleLife Download-Fritz Goldfish64 PMHeart savvamitrofanov vit9696 Guides linked or those that inspired this guide: r/Hackintosh Vanilla Desktop Guide All-in-one Vanilla AMD Hackintosh Guide USB Map Guide Intel Framebuffer Patching AppleALC Supported Codecs gfxutil And for those who have either recommendations or issues with this guide can find the Github for this site here Sources: KASLR slide: Vit9696's Explainer Apianti's explainer KASLR Explainer More KASLR Explainer Cleaning RC scripts: Clover Emulated NVRAM Uninstaller ACPI Dumping: acpica iServices Guide: Как завести сервисы Apple - iMessage, FaceTime, iCloud iGPU and DRM configuration: WhateverGreen's manual WhateverGreen's DRM chart DRM Testing rEFInd Guide: rEFInd Manual "}}